{"version":3,"sources":["firebase.js","Settings.js","Header.js","Footer.js","EmojiPicker.js","SendMessage.js","MessageList.js","SignInLogIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Settings","className","onSubmit","this","props","onButtonClickUserName","id","type","value","username","onChange","userName","onClick","logOut","Component","Header","headerChange","handleSettingsClick","Footer","emojiChosen","EmojiPicker","useState","setChosenEmoji","onEmojiClick","event","emojiObject","preventDefault","emoji","handleEmojiClick","SendMessage","enterFunction","keyCode","console","log","document","getElementById","click","getChosenEmoji","sendEmojiIntoApp","textInput","current","focus","handleGifSearch","state","gifSearchText","axios","method","url","responseType","params","api_key","q","then","gifData","data","setState","searchGifs","catch","error","handleGifClick","target","src","selectedGifId","showGifPicker","sendInfoWithForm","onFormButtonClick","changeGifMenuVisibility","handleGifTextInput","React","createRef","selectedEmoji","addEventListener","removeEventListener","onButtonClick","htmlFor","onTextInput","textInputValue","ref","contentEditable","width","height","rows","cols","placeholder","showEmojiPicker","autoFocus","map","gifObject","images","fixed_height_small","MessageList","messageStyle","messageStyleOtherUser","user","array","messages","backgroundColor","message","messageGifUrl","text","match","isAnonymous","displayName","userId","uid","style","date","time","SignInLogIn","onButtonClickSignUp","emailSignUp","required","passwordSignUp","title","onButtonClickSignIn","emailSignIn","passwordSignIn","onButtonClickGuest","App","handleChange","userInput","getDateAndTime","getGifInfoViaButton","chosenGif","handleSubmit","dbRef","database","dbRefUSM","newMessagesArray","Object","assign","newUserSpecificMessagesArray","userSpecificMessages","messageToBeAdded","currentUser","length","push","shift","set","handleSignUpEmail","email","hanldeSignUpPassword","password","handleSignUpSubmit","alert","auth","createUserWithEmailAndPassword","handleSignInEmail","hanldeSignInPassword","handleSignInSubmit","signInWithEmailAndPassword","code","settingsPageClicked","handleLogOut","anonymousUser","signOut","handleUserName","handleSaveUserName","updateProfile","updateUserNameInDB","forEach","handleGuestButtonClick","signInAnonymously","handleThemeColorChange","theme","messageColor","child","themeColor","day","Date","getDate","monthNumber","getMonth","year","getFullYear","dateFull","hours","getHours","min","getMinutes","timeMilitary","getSeconds","i","timeNormal","x","unshift","indexOf","timeActual","newState","hanldleColorChange","handleEmojiSelection","temporaryUserInput","newTemporaryUserInput","messagesFiltered","tempUserInput","selectedColorOption","userComputer","userSignedIn","emojiString","on","snapshot","messagesArray","val","onAuthStateChanged","photoURL","emailVerified","handleColorChange","messagesUSM","sendGifToApp","handleGif","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80967853.chunk.js","sourcesContent":["// import firebase from node modules\nimport firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDbV1S2623FseOXa7X5Y3cRuUBY8Xx_Uv8\",\n    authDomain: \"chat-app-26edb.firebaseapp.com\",\n    databaseURL: \"https://chat-app-26edb.firebaseio.com\",\n    projectId: \"chat-app-26edb\",\n    storageBucket: \"chat-app-26edb.appspot.com\",\n    messagingSenderId: \"1057627994740\",\n    appId: \"1:1057627994740:web:77d4d8bb6632df674fef21\"\n};\n// Initialize Firebase using the config\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\n\nclass Settings extends Component {\n    render() {\n        return(\n            <div className=\"settings\">\n                <div className=\"wrapper flexContainer\">\n                    <div className=\"settingsFormContainer\">\n                        <h2>Settings</h2>\n                        <ul>\n                            <li>\n                                <form onSubmit={this.props.onButtonClickUserName}>\n                                    \n                                        <h3>Add/Change Username</h3>\n                                        {/* <label htmlFor=\"username\">Add/Change Username</label> */}\n                                        <input\n                                            id=\"username\"\n                                            type=\"text\"\n                                            value={this.props.username}\n                                            onChange={this.props.userName} />\n                                        <button>Save</button>\n                                    \n                                </form>\n                            </li>\n                            {/* adding these in but not working yet */}\n                            {/* <li>\n                                <form>\n                                    <label>Add/Change Display Picture</label>\n                                </form>\n                            </li> */}\n                            {/* <li>\n                                <form>\n                                    <h3>Change Color Theme</h3>\n                                    <div className=\"colorChoices\">\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color1\"></label>\n                                            <div className=\"color1\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color1\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color1'}\n                                            value=\"color1\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n                                        \n                                        <div className=\"color\">\n                                            <label htmlFor=\"color2\"></label>\n                                            <div className=\"color2\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color2\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color2'}\n                                            value=\"color2\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color3\"></label>\n                                            <div className=\"color3\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color3\"\n                                            name=\"colorChoice\"\n                                            checked={\n                                            (event, 'color3') => {\n                                                this.props.selectedColorOption\n                                            }}\n                                            value=\"color3\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color4\"></label>\n                                            <div className=\"color4\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color4\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color4'}\n                                            value=\"color4\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color5\"></label>\n                                            <div className=\"color5\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color5\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color5'}\n                                            value=\"color5\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n                                    </div>\n                                    <button>Save</button>\n                                </form>\n                            </li> */}\n                            {/* <li>\n                                <form>\n                                        <label>Change Font Size</label>\n                                </form>\n                            </li> */}\n                            <button onClick={this.props.logOut}>Log Out</button>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Settings;","import React, { Component } from 'react';\nimport Settings from './Settings';\n\nclass Header extends Component {\n    render() {\n        return(\n            <div>\n            {this.props.headerChange === null\n\n            ?\n\n                <header className=\"headerSignedOutPage\">\n                    <div className=\"wrapper flexContainer\">\n                        <h1>Chat App</h1>\n                        {/* <div\n                            className=\"iconContainer\"\n                            onClick={this.props.handleSettingsClick}>\n                            <i class=\"fas fa-bars\"></i>\n                        </div> */}\n                    </div>\n                </header>\n            \n\n            :\n\n                <header className=\"headerSignedInPage\">\n                    <div className=\"wrapper flexContainer\">\n                        <h1>Chat App</h1>\n                        <div\n                            className=\"iconContainer\"\n                            onClick={this.props.handleSettingsClick}>\n                            <i className=\"fas fa-bars\"></i>\n                        </div>\n                    </div>\n                </header>\n        }\n            </div >\n\n            \n        );\n    };\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <div className=\"wrapper flexContainer\">\n                    <p>Copyright Sarah Armitage 2019</p>\n                </div>\n            </footer>\n        );\n    };\n}\n\nexport default Footer;","import React, { useState } from 'react';\nimport Picker from 'emoji-picker-react';\n\nlet emojiChosen = '';\nconst EmojiPicker = (props) => {\n    const [chosenEmoji, setChosenEmoji] = useState(null);\n    // console.log(props);\n    \n\n    const onEmojiClick = (event, emojiObject) => {\n        event.preventDefault();\n        setChosenEmoji(emojiObject);\n        // console.log(emojiObject.emoji);\n        emojiChosen = emojiObject.emoji;\n        // console.log(emojiChosen);\n        props.handleEmojiClick(event, emojiChosen);\n    }\n    // check to make sure just one button has a \"submit\" functionality\n    // the emoji button could be \"submitting\" b/c when the button is clicked, it is automatically sending the message-> want it to wait  so that the user can continue typing their mssage\n    // check that the emoji button submit isnt actually calling the submit functionality of the message form\n\n    return (\n        <div>\n            {/* {\n                chosenEmoji\n                    ? (<span>You chose: {chosenEmoji.emoji}</span>)\n                    : <span>No emoji Chosen</span>\n\n            } */}\n            <Picker onEmojiClick={onEmojiClick} />\n        </div>\n    );\n}\n\n\nexport default EmojiPicker;","import React, { Component } from 'react';\nimport EmojiPicker from './EmojiPicker';\nimport axios from 'axios';\n\nclass SendMessage extends Component {\n    constructor() {\n        super();\n        // creating a Ref that can then be assigned to the textarea element with ref-attribute, assigning it to the variable textInput\n        this.textInput = React.createRef();\n        this.state = {\n            selectedEmoji: '',\n            searchGifs: [],\n            showGifPicker: false,\n            gifSearchText: '',\n            selectedGifId: ''\n        }\n    }\n\n    componentDidMount() {\n        // document.addEventListener(\"keydown\", this.enterFunction, false);\n        document.addEventListener(\"keypress\", this.enterFunction, false);\n    }\n\n    // prevents this from firing when user logs out (id=\"clickSend\" would be null)\n    componentWillUnmount() {\n        document.removeEventListener(\"keypress\", this.enterFunction, false)\n    }\n\n    enterFunction = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            //Do whatever when esc is pressed\n            console.log(\"Pressed enter\");\n            console.log(event);\n            document.getElementById('clickSend').click();\n            // this.props.onButtonClick()\n        }\n    }\n\n    // grab the emoji chosen by the user (coming from the EmojiPicker component) and set it in state in the variable slectedEmoji\n    getChosenEmoji = (event, emoji) => {\n        // console.log(emoji);\n        // this.setState({\n        //     selectedEmoji: emoji\n        // })\n        this.props.sendEmojiIntoApp(emoji);\n        // focus to the textarea when the emoji is clicked (lets the user keep typing message after they choose an emoji) -> using \"React refs\"\n        this.textInput.current.focus();\n    }\n\n    // submitOnEnter(event) {\n    //     console.log(event);\n    //     event.preventDefault();\n        \n    //     if (event.which === 13) {\n    //         event.target.form.dispatchEvent(new Event(\"submit\", { cancelable: true }));\n    //         console.log(\"enter\");\n            \n    //         event.preventDefault(); // Prevents the addition of a new line in the text field (not needed in a lot of cases)\n    //     }\n    // }\n\n    handleGifSearch = (event) => {\n        // event.preventDefault();\n        console.log(\"I searched for a gif\");\n        console.log(this.state.gifSearchText);\n        \n        \n        // make axios call to GIPHY api\n        axios({\n            method: 'get',\n            url: `https://api.giphy.com/v1/gifs/search`,\n            responseType: 'json',\n            params: {\n                api_key: 'aBCgQnzAOOAJ9COBm7Yt2Rwhp5jVz0rN',\n                // q: `dog`\n                q: this.state.gifSearchText\n            }\n        }).then((gifData) => {\n            console.log(gifData.data.data);\n            this.setState({\n                searchGifs: gifData.data.data\n            })\n        }).catch((error) => {\n            console.log(error);\n        })\n    }\n\n    handleGifClick = (event) => {\n        console.log(event);\n        console.log(event.target.src);\n        this.setState({\n            selectedGifId: event.target.src,\n            showGifPicker: false\n        })\n        // this.props.sendGifToApp(event.target.id)\n    }\n\n    sendInfoWithForm = (event) => {\n        console.log(\"blaaa blaa blaa\");\n        this.props.onFormButtonClick(this.state.selectedGifId);\n        this.setState({\n            selectedGifId: ''\n        })\n    }\n\n    // when user clicks on Gif button, either show or hide the Gif menu\n    // also... clear the api images and the search text so they are clear/empty for the next search\n    changeGifMenuVisibility = (event) => {\n        console.log(event);\n        console.log(this.state.showGifPicker);\n        \n        if (this.state.showGifPicker) {\n            this.setState({\n                showGifPicker: false,\n                searchGifs: [],\n                gifSearchText: ''\n            })\n        } else {\n            this.setState({\n                showGifPicker: true\n            })\n        }\n        \n    }\n\n    // when user types their gif search into the text input\n    // AFTER the user's input is set in state, a callback fxn runs that will fire the handleGifSearch() fxn (if it was not wrapped in a callback fxn, handleGifSearch() would fire right away and it would call the API before the current typed letter was saved in state, causing the images returned from the API to always be a letter behind)\n    handleGifTextInput = (event) => {\n        this.setState({\n            gifSearchText: event.target.value\n        }, function() {\n            console.log(\"I was placed in state\");\n            this.handleGifSearch()\n        })\n    }\n\n    //✅NOTE: got gif to show up inside of fake text area.. now need it to get sent to the dispaly messages when send form\n    //✅need to remove the chosen gif from the text area after the send button is clicked - DONE\n    //✅also need to change the input stuff for the new fake text area\n    //✅fix date/time stamps\n    //✅remove api search text from the gif picker after it is closed\n\n    render() {\n        return(\n            <div className=\"sendMessageArea\">\n                <div className=\"wrapper flexContainer\">\n                    <form \n                    onSubmit={this.props.onButtonClick}\n                    // onSubmit={this.sendInfoWithForm}\n                    // onSubmit={this.submitOnEnter}\n                    >\n                            <label htmlFor=\"userMessage\"></label>\n                            {/* <textarea \n                            rows=\"10\" \n                            cols=\"40\" \n                            placeholder=\"Enter message here\" \n                            id=\"userMessage\" \n                            onChange={this.props.onTextInput}\n                            value={this.props.textInputValue}\n                            ref={this.textInput}\n                            contenteditable>\n                            </textarea> */}\n\n                            {/* an editable div (the \"contenteditable\" attribute allows users to make changes to the content inside the div, user can edit the contents of the div) that will look like a textarea. Depending on the content, the div will either have an actual text area inside for catching the users text input OR an image tag for gifs selected by the user */}\n                            {/* passing an image into a \"textarea\" */}\n                            <div \n                            className=\"textArea\"\n                            id=\"userMessage\"\n                            onChange={this.props.onTextInput}\n                            value={this.props.textInputValue}\n                            ref={this.textInput}\n                            contentEditable>\n\n                            {this.state.selectedGifId\n                            ?\n                            \n                            <div className=\"imageContainer\">\n                                <img\n                                src={this.state.selectedGifId}\n                                width=\"120\"\n                                height=\"100\"\n                                contentEditable=\"false\" />\n                            </div>\n                            :\n                            null\n                            }\n\n                            {/* Hi */}\n                            <textarea\n                                rows=\"10\"\n                                cols=\"40\"\n                                placeholder=\"Enter message here\"\n                                id=\"userMessage\"\n                                onChange={this.props.onTextInput}\n                                value={this.props.textInputValue}\n                                ref={this.textInput}\n                                // contenteditable\n                                >\n                            </textarea>\n\n                            </div>\n                            <div\n                            className=\"sendAndEmojiContainer\">\n                                <button \n                                className=\"emojiIcon\"\n                                onClick={this.props.onEmojiClick}>\n                                    <i className=\"far fa-laugh\"></i>\n                                </button>\n                                {/* <button onClick={this.handleGifSearch}>GIF</button> */}\n                                <button onClick={this.changeGifMenuVisibility}>GIF</button>\n                                <button \n                                id=\"clickSend\"\n                                onClick={this.sendInfoWithForm}>Send</button>   \n                            </div>\n                            \n                        {this.props.showEmojiPicker \n                        ? \n                        <div className=\"emojiPicker\">\n                            <EmojiPicker \n                            handleEmojiClick={this.getChosenEmoji}/>\n                        </div> \n                        :\n                        null}\n\n                        {this.state.showGifPicker\n                        ?\n                        <div className=\"gifPicker\">\n                            <input \n                            type=\"text\"\n                            onChange={this.handleGifTextInput}\n                            value={this.state.gifSearchText}\n                            autoFocus\n                            >\n                            </input>\n\n                            {/* if there is text in the gif search, render the list of gifs from the api, else, don't render anything */}\n                            {this.state.gifSearchText\n                            ?\n                            <ul>\n                                {this.state.searchGifs.map((gifObject) => {\n                                    return (\n                                        <li>\n                                            <img\n                                                src={gifObject.images.fixed_height_small.url}\n                                                id={gifObject.id}\n                                                onClick={this.handleGifClick} />\n                                        </li>\n                                    )\n                                })\n                                }\n                            </ul>\n                            :\n                            null\n                            }\n                           \n                        </div>\n                        :\n                        null}\n                    </form>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default SendMessage;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nclass MessageList extends Component {\n    render() {\n        // change color of message borders based on user selection (passed down as a prop from App.js)\n        // const arrayUSM = this.props.messagesUSM\n        // don't think I need this user specific messages anymore??? (have usernames atatched to messages now)\n        const user = this.props.user;\n        // console.log(user.displayName);\n        \n        const array = this.props.messages;\n        let messageStyle;\n        let messageStyleOtherUser;\n\n        messageStyle = {\n            backgroundColor: 'blueviolet'\n        };\n        // default color for the other users\n        messageStyleOtherUser = {\n            backgroundColor: '#0392cf'\n        };\n\n        // let messageText;\n       \n\n        // find the uid associated with the username and match based on that for color\n        return(\n\n            <div className=\"messageArea\">\n                <div className=\"wrapper messageListContainer\">\n                        <ScrollToBottom className=\"messageBox\">\n                            {   \n                                \n                            array.map((message) => {\n                                // let reMessage = new RegExp(message.text);\n                                // console.log(message.text);\n                                \n                                // if the message has a gif url in it, then grab that url\n                                // check that it has a \"http\" at the begining and a \"gif\" at the end\n                                const myRe = /^(http.*\\.gif)$/;\n                                let messageGifUrl = message.text.match(myRe);\n                                // console.log(messageGifUrl);\n                        \n                                // if the message to be rendered is asscoiated with the current user logged in, make their text bubbles PURPLE\n                                // OR\n                                // if the message to be rendered is associated with a guest, make their text bubbles PURPLE\n                                if (this.props.user.isAnonymous === false) {\n                                    console.log(\"I am not a guest\");\n                                    console.log(message.username);\n                                    console.log(user.displayName);\n                                    \n                                    \n                                    // if (message.username === user.displayName) {\n                                    if (message.userId === user.uid) {\n                                        return (\n                                            <li\n                                                className=\"message currentUserPosition\"\n                                                style={messageStyle} >\n                                                <p\n                                                    className=\"userName\">\n                                                    {message.username}</p>\n                                                <p\n                                                    className=\"dateAndTime\">\n                                                    {`${message.date} ${message.time}`}</p>\n                                                {/* <p \n                                            className=\"messageText\">\n                                            {message.text}</p> */}\n                                                {messageGifUrl !== null\n                                                    // if the search for a gif url in the message is not null (meaning there was a match and it does include a gif url), then render the gif image, otherwise just render the message without an image\n                                                    ?\n                                                    <p className=\"gifContainer\">\n                                                        <img src={messageGifUrl[0]} />\n                                                    </p>\n                                                    :\n                                                    <p>{message.text}</p>\n                                                }\n                                            </li>\n                                        )\n                                    } else {\n                                        return (\n                                            <li\n                                                className=\"message\"\n                                                style={messageStyleOtherUser} >\n                                                <p\n                                                    className=\"userName\">{message.username}</p>\n                                                <p\n                                                    className=\"dateAndTime\">\n                                                    {`${message.date} ${message.time}`}</p>\n                                                {/* <p\n                                            className=\"messageText\">\n                                            {message.text}</p> */}\n                                                {messageGifUrl !== null\n                                                    // if the search for a gif url in the message is not null (meaning there was a match and it does include a gif url), then render the gif image, otherwise just render the message without an image\n                                                    ?\n                                                    <p className=\"gifContainer\">\n                                                        <img src={messageGifUrl[0]} />\n                                                    </p>\n                                                    :\n                                                    <p>{message.text}</p>\n                                                }\n                                            </li>\n                                        )\n                                    }\n                                } else if (this.props.user.isAnonymous === true) {\n                                    console.log(\"I am a guest\");\n                                    console.log(message.username);\n                                    \n                                    if (message.username === 'Guest') {\n                                        return (\n                                            <li\n                                                className=\"message currentUserPosition\"\n                                                style={messageStyle} >\n                                                <p\n                                                    className=\"userName\">\n                                                    {message.username}</p>\n                                                <p\n                                                    className=\"dateAndTime\">\n                                                    {`${message.date} ${message.time}`}</p>\n                                                {/* <p \n                                            className=\"messageText\">\n                                            {message.text}</p> */}\n                                                {messageGifUrl !== null\n                                                    // if the search for a gif url in the message is not null (meaning there was a match and it does include a gif url), then render the gif image, otherwise just render the message without an image\n                                                    ?\n                                                    <p className=\"gifContainer\">\n                                                        <img src={messageGifUrl[0]} />\n                                                    </p>\n                                                    :\n                                                    <p>{message.text}</p>\n                                                }\n                                            </li>\n                                        )\n                                    } else {\n                                        return (\n                                            <li\n                                                className=\"message\"\n                                                style={messageStyleOtherUser} >\n                                                <p\n                                                    className=\"userName\">{message.username}</p>\n                                                <p\n                                                    className=\"dateAndTime\">\n                                                    {`${message.date} ${message.time}`}</p>\n                                                {/* <p\n                                            className=\"messageText\">\n                                            {message.text}</p> */}\n                                                {messageGifUrl !== null\n                                                    // if the search for a gif url in the message is not null (meaning there was a match and it does include a gif url), then render the gif image, otherwise just render the message without an image\n                                                    ?\n                                                    <p className=\"gifContainer\">\n                                                        <img src={messageGifUrl[0]} />\n                                                    </p>\n                                                    :\n                                                    <p>{message.text}</p>\n                                                }\n                                            </li>\n                                        )\n                                    }\n                                }\n                            })}\n                        </ScrollToBottom>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SignInLogIn extends Component {\n    render() {\n        return(\n            <div className=\"wrapper loginFlexContainer\">\n                <div className=\"notSingedInPage\">\n                    {/* sign up user */}\n                    <form className=\"signUp\"\n                        onSubmit={this.props.onButtonClickSignUp}>\n                            <h2>Sign Up</h2>\n                            {/* working on making this username input work */}\n                            {/* <label htmlFor=\"displayName\">Username:</label>\n                            <input \n                                type=\"text\" \n                                id=\"displayName\" \n                                placeholder=\"Username\"\n                                required/> */}\n                            <label htmlFor=\"email\">Email Address:</label>\n                            <input \n                                type=\"email\" \n                                id=\"email\" \n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignUp}\n                                required/>\n                            <label htmlFor=\"password\">Password:</label>\n                            <input \n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignUp} \n                                required\n                                title=\"8 characters minimum\"/>\n                            <button>Sign Up</button>\n                    </form>\n\n                    {/* Sign in user */}\n                    <form \n                        className=\"login\"\n                        onSubmit={this.props.onButtonClickSignIn}>\n                            <h2>Sign In</h2>\n                            <label htmlFor=\"email\">Email Address:</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignIn} \n                                required/>\n                            <label htmlFor=\"password\">Password:</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignIn} \n                                required/>\n                            <button>Sign In</button>\n                    </form>\n                </div>\n                {/* continue as guest */}\n                <button \n                className=\"guestButton\"\n                onClick={this.props.onButtonClickGuest}\n                >Continue as guest</button>\n            </div> \n        );\n    };\n}\n\nexport default SignInLogIn;","import React, { Component } from 'react';\n// import styles\nimport './App.css';\n// import firebase\nimport firebase from './firebase';\n// import components\nimport Header from './Header';\nimport Footer from './Footer';\nimport SendMessage from './SendMessage';\nimport MessagesList from './MessageList';\nimport SignInLogIn from './SignInLogIn';\nimport Settings from './Settings';\nimport getEmoji from './EmojiPicker';\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      userSpecificMessages: [],\n      messagesFiltered: [],\n      userInput: '',\n      tempUserInput: '',\n      currentUser: null,\n      anonymousUser: false,\n      username: '',\n      uid: '',\n      email: '',\n      password: '',\n      settingsPageClicked: false,\n      selectedColorOption: '',\n      theme: {\n        messageColor: ''\n      },\n      date: '',\n      time: '',\n      userComputer: '',\n      showEmojiPicker: false,\n      userSignedIn: false,\n      selectedEmoji: '',\n      emojiString: '',\n      selectedGifId: ''\n    }\n  }\n\n  componentDidMount() {\n    // connect app to firebase (messages stored in the messages branch)\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    \n    // when the database changes (newMessages array) grab the data in the database (will come back as an array)\n    dbRef.on('value', (snapshot) => {\n    const messagesArray = snapshot.val();\n    \n    // set state with messagesArray from databse\n    this.setState({\n      messages: messagesArray\n    })\n    });\n\n    // set an event listener for user login status\n    // listen for change in user auth status (is user logged in or not?)\n    firebase.auth().onAuthStateChanged((user) => {\n\n      // if the user signed in as a guest (anonymously)\n      if (this.state.anonymousUser) {\n        console.log(`I was signed in anonymously`);\n        // Anonymous user signed in \n        if (user) {\n          console.log('I am a guest');\n          \n          // if the user is signed it, set the user object to the current user in state (current user will go from null -> user object), this will conidtionally render the chat page\n          this.setState({\n            currentUser: user,\n            uid: user.uid,\n            username: 'Guest'\n          })\n        } else {\n          // No anonymous user is signed in.\n          // currentUser in state will be set to null, will show login page\n          this.setState({\n            currentUser: null\n          })\n        }\n        \n      // if the user signed in under their own username/password \n      } else {\n\n        if (user) {\n          // User is signed in.\n          // if the user is signed it, set the user object to the current user in state (current user will go from null -> user object), this will conidtionally render the chat page\n          this.setState({\n            currentUser: user,\n            uid: user.uid,\n            username: user.displayName\n          })\n\n          // ******** working on this functionality *********\n          // grab the user's custom theme colour from the database and set that in state, so that the messages will be updated to have that color\n          // const dbRefUsers = firebase.database().ref('users');\n          // dbRefUsers.on('value', (snapshot) => {\n          //   const usersInfo = snapshot.val();\n          //   this.setState({\n          //     theme: {\n          //       messageColor: usersInfo[`${this.state.uid}`].themeColor\n          //     }\n          //   })\n          // })\n\n\n        } else {\n          // No user is signed in.\n          // currentUser in state will be set to null, will show login page\n          this.setState({\n            currentUser: null\n          })\n        }\n\n        // get user info (use this info to differenitate the users text bubbles)\n        const currentUser = firebase.auth().currentUser;\n        if (currentUser != null) {\n          const userName = user.displayName;\n          const userEmail = user.email;\n          const userPhotoUrl = user.photoURL;\n          const userEmailVerified = user.emailVerified;\n          const userUid = user.uid;  // The user's ID, unique to the Firebase project\n        }\n\n        // username: this.state.currentUser.displayName\n\n\n      }\n    });\n  } \n\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n    // when user types message, grab the date and time\n    this.getDateAndTime();\n    // when the user starts typing, make sure that the emojiPicker is closed (if open)\n    this.setState({\n      showEmojiPicker: false\n    })\n  }\n\n  getGifInfoViaButton = (chosenGif) => {\n    console.log(\"passing gif info...\", chosenGif);\n    console.log(chosenGif);\n\n    // when user picks a gif, grab the date and time\n    this.getDateAndTime();\n    \n    // only if there is a gif chosen by user, set the userInput in state to be that gif, else do not update state\n    if (chosenGif) {\n      this.setState({\n        userInput: chosenGif\n      })\n    }\n    \n  }\n  \n\n  handleSubmit = (event, chosenGif) => {\n    console.log(event, chosenGif);\n    console.log(`I submitted the form!`);\n    \n\n    // this.setState({\n    //   showEmojiPicker: false\n    // })\n\n    // if (chosenGif !== undefined) {\n    //   console.log(\"I am not undefined\");\n    //   this.setState({\n    //     // chosenGif is a string (gif url)\n    //     userInput: chosenGif\n    //   })\n    // }\n    \n    event.preventDefault();\n    // will use dbRef when pushing up the new array to the database\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n\n    // clone the array of databast message objects from state using Object.assign method\n    // cant use spread b/c it is a shalow copy and woulndt copy the nested elements\n    const newMessagesArray = [];\n    Object.assign(newMessagesArray, this.state.messages);\n    const newUserSpecificMessagesArray = [];\n    Object.assign(newUserSpecificMessagesArray, this.state.userSpecificMessages);\n\n    // grab the message inputted by the user (held in state)\n    const messageToBeAdded = {\n      // username: this.state.currentUser.displayName,\n      username: this.state.username,\n      userId: this.state.currentUser.uid,\n      text: this.state.userInput,\n      date: this.state.date,\n      time: this.state.time\n    };\n    console.log(messageToBeAdded);\n    \n\n    // add messageToBeAdded to the cloned array, and push that array up to firebase (use set to replace the previous array up there)\n    // first check to see if the length of the newMessagesArray is less than 100 \n    // also check if the message is just an empty string\n    // then add messageToBeAdded to newMessagesArray\n    // then set in firebase (so that the dbRef listener will will be called and it will update the this.state.messages and cause app to re-render with the new message added to the list of messages)\n    // \n\n    // if the user's input is not empty, enter statment:\n    if (messageToBeAdded.text !== '') {\n      // if the cloned messages array is less than 100:\n      if (newMessagesArray.length < 100) {\n        // add the new message to the array\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n\n        // else if the cloned messages array is greater than 100:\n      } else {\n        // remove the first message from the array (index=0)\n        newMessagesArray.shift();\n        newUserSpecificMessagesArray.shift();\n        // then add the new message to the end\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n      }\n      // else message is empty\n    } else {\n      console.log(\"The gif did not make it into the db\");\n      \n    }\n\n    // push the newMessagesArray up to firebase (set to replace)\n    dbRef.set(newMessagesArray);\n    dbRefUSM.set(newUserSpecificMessagesArray);\n\n    // reset the userInput for the next message\n    // reset the date and time for next message\n    this.setState({\n      userInput: '',\n      date: '',\n      time: '',\n      showEmojiPicker: false\n    }); \n  }\n\n  // -------------------- AUTHENTICATION ---------------------\n  // ----- SIGN UP -----\n  // grab user email for sign up\n  handleSignUpEmail = (event) => {\n   this.setState({\n     email: event.target.value\n   })\n  }\n\n  // grab user password for sign up\n  // need to put notifcation for user -> password needs to be > 6 characters long\n  hanldeSignUpPassword = (event) => {    \n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign up button\n  handleSignUpSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.password.length < 6) {\n      alert('Your password must be 6 characters or longer');\n    }\n    // create new account for user\n    firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\n      // handle errors here\n    })\n  }\n// ----- SIGN IN -----\n  // grab user email for sign in\n  handleSignInEmail = (event) => {\n    this.setState({\n      email: event.target.value\n    })\n  }\n\n  // grab user password for sign in\n  hanldeSignInPassword = (event) => {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign in button\n  handleSignInSubmit = (event) => {\n    event.preventDefault();\n\n    // change in user auth status fires the auth event listener\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // handle incorrect sign in password\n      alert('You have entered either an incorrect email or password');\n    });\n    // make sure the settings page is closed when user logs out\n    this.setState({\n      settingsPageClicked: false\n    })\n  }\n\n// ----- SIGN OUT -----\n  handleLogOut = (event) => {\n    // when the user clicks the logout button, make sure the current anonymous user is made to be false, and that the settings page is closed\n    this.setState({\n      settingsPageClicked: false,\n      anonymousUser: false\n    })\n    // change in user auth status fires the auth event listener\n    firebase.auth().signOut().then(function () {\n      // console.log(\"I am still logged in!!!!\");\n      // Sign-out successful.\n      console.log(\"sign out successful\");\n    }).catch(function (error) {\n      // An error happened.\n    });\n  }\n\n// ----- UPDATE USERNAME -----\n  // grab user's desired username \n  handleUserName = (event) => {\n    this.setState({\n      username: event.target.value\n    })\n  }\n  // send username to firebase auth on button submit\n  handleSaveUserName = (event) => {\n    event.preventDefault();\n\n    const user = firebase.auth().currentUser;\n    const userName = user.displayName;\n    user.updateProfile({\n      displayName: this.state.username,\n      // going to add the ability to add display picture\n      // photoURL: \"https://example.com/jane-q-user/profile.jpg\"\n    }).then(function () {\n      // Update successful.\n      const userName = user.displayName;\n      \n    }).then(() => {\n      // call fxn to update username in databse (ensures it stays up to date in the message history)\n      this.updateUserNameInDB()\n    }).catch(function (error) {\n      // An error happened.\n    });\n\n    this.setState({\n      username: '',\n      settingsPageClicked: !this.state.settingsPageClicked\n    });\n  }\n\n  // function to update username in database messages when the user changes their username\n  updateUserNameInDB = () => {\n    // reference to firebase, will use when sending array of messages with updated usernmes back up tp the DB\n    const dbRef = firebase.database().ref('messages');\n    const newMessagesArray = [];\n    // make a copy of the array held in this.state.messages (most recent copy of the mesages in firebase) and save it to an array called newMessagesArray\n    Object.assign(newMessagesArray, this.state.messages);\n\n    // keep the username up to date for all messages of a user (when/if a user changes their username, want to update all the messages they sent to have the current username)\n    newMessagesArray.forEach((message) => {\n      // if the userId of the message matches the current user's Id, then update that message to have the user's current username\n      if (message.userId === this.state.currentUser.uid) {\n        message.username = this.state.currentUser.displayName\n      }\n    })\n    // once the array has been updated so that all the messages have the new username, push that array up to firebase (this will cause a re-render and this.state.messages will be updated with the new array, and you will see the new username reflected in all the preivious messages)\n    dbRef.set(newMessagesArray);\n  }\n\n  // GUEST USER\n  // fxn to login as a guest into guest chat room\n  handleGuestButtonClick = () => {\n    console.log(`I am a guest let me in!`);\n\n    this.setState({\n      anonymousUser: true\n    }, function() {\n        firebase.auth().signInAnonymously().catch(function (error) {\n          // Handle Errors here.\n          console.log(error);\n          const errorCode = error.code;\n          const errorMessage = error.message;\n          // ...\n        })\n    } )\n    \n    \n  }\n  \n  // ---------------- END OF AUTHENTICATION ------------------\n\n  handleThemeColorChange = (event) => {\n    this.setState({\n      theme: {\n        messageColor: event.target.value\n      } \n    })\n    const uid = this.state.currentUser.uid;\n    \n    // push the theme color selected by the user up to firebase (save it in under the user's specific uid #)\n    firebase.database().ref().child('users').child(uid).set({\n      themeColor: `${this.state.theme.messageColor}`\n    })\n  }\n\n  //--------------- DATE & TIME STAMP -----------------\n  // function to grab the date and time (to use in messages)\n  getDateAndTime = () => {\n    // get the date\n    const day = new Date().getDate(); //Current Day\n    const monthNumber = new Date().getMonth(); //Current Month\n    const year = new Date().getFullYear(); //Current Year\n    // convert monthNumber into monthYear\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const monthWord = months[monthNumber];\n    const dateFull = `${monthWord} ${day}, ${year}`;\n    // get the time\n    const hours = new Date().getHours(); //Current Hours\n    const min = new Date().getMinutes(); //Current Minutes\n    const sec = new Date().getSeconds(); //Current Seconds\n    // make 24hour clock array\n    const timeMilitary = []\n    for (let i = 0; i <= 24; i++) {\n      timeMilitary.push(i);\n    }\n\n    // make the 12hour clock array\n    const timeNormal = [];\n    for (let x = 1; x <= 2; x++) {\n      for (let i = 1; i <= 12; i++) {\n        timeNormal.push(i);\n      }\n    }\n    timeNormal.unshift(12)\n\n    // convert the 24hour clock time into 12hour clock time\n    const timeIndex = timeMilitary.indexOf(hours);\n    const time = timeNormal[timeIndex];\n    // i.e. have: 14 22 31\n    // need: 2:22\n    const timeActual = `${time}:${min}`;\n\n    // ---------------------------\n    // The final date and time stamp\n    // use: dateFull & timeActual\n    // ---------------------------\n\n    // save the date and time in state (will be grabbed and attached to \"message\" when user clicks submit button)\n    this.setState({\n      date: dateFull,\n      time: timeActual\n    })\n  }\n\n  // when the user clicks on the hamburger icon the settings menu will appear (in the main)\n  handleSettingsClick = () => {\n    this.setState({\n      settingsPageClicked: !this.state.settingsPageClicked\n    })\n  }\n\n  // when the user clicks on the emoji icon, change the state of showEmojiPicker to true\n  handleEmojiClick = (event) => {\n    event.preventDefault();\n    const newState = !this.state.showEmojiPicker;\n    this.setState({\n      showEmojiPicker: newState\n    })\n  }\n\n  hanldleColorChange = (event) => {\n    // working on adding this\n    // this.setState({\n    //   theme: {\n    //     messageColor: event.target.value;\n    //   }\n    // })\n  }\n\n  handleEmojiSelection = (emoji) => {\n    console.log(emoji);\n    // this.setState({\n    //   selectedEmoji: emoji\n    // })\n    // add emoji to the user input \n    // let temporaryUserInput = `${this.state.userInput}${emoji}`\n    // this.setState({\n    //   userInput: `${this.state.userInput}${emoji}`\n    // })\n\n    // clone the user input in state\n    const temporaryUserInput = this.state.userInput;\n    // append the emoji on to the end of the string the user is typing in the moment\n    const newTemporaryUserInput = `${temporaryUserInput}${emoji}`\n    console.log(newTemporaryUserInput);\n    this.setState({\n      userInput: newTemporaryUserInput\n    })\n  }\n\n  // handleGif = (gifId) => {\n  //   console.log(\"Passed id to app!\");\n    \n  //   this.setState({\n  //     selectedGifId: ''\n  //   })\n  // }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        headerChange={this.state.currentUser}\n        handleSettingsClick={this.handleSettingsClick}/>\n        <main>\n          {/* first conditional: if the user variable in state is null, user is not logged in, in this case render the signup/login page\n          if the user variable holds the current user object from firebase, the user is logged in, in this case render the MAIN page */}\n          {this.state.currentUser === null \n\n          ? \n\n          <SignInLogIn \n          emailSignUp={this.handleSignUpEmail}\n          passwordSignUp={this.hanldeSignUpPassword}\n          onButtonClickSignUp={this.handleSignUpSubmit}\n          emailSignIn={this.handleSignInEmail}\n          passwordSignIn={this.hanldeSignInPassword}\n          onButtonClickSignIn={this.handleSignInSubmit}\n          onButtonClickGuest={this.handleGuestButtonClick}/>\n\n          : \n          \n          // second conditional\n          // rendering of the MAIN section of the page\n          // if the setting page icon was clicked it, the variable settingsPageClicked in state will be true, in this case render the settings page\n          // else it is false, and in this case render the messaging page\n          (this.state.settingsPageClicked === true\n           \n          ?\n\n          <Settings \n          username={this.state.username}\n          userName={this.handleUserName}\n          onButtonClickUserName={this.handleSaveUserName}\n          selectedColorOption={this.state.selectedColorOption}\n          handleColorChange={this.handleColorChange}\n          logOut={this.handleLogOut}/>\n\n          :\n\n          <div className=\"content\">\n            <MessagesList\n              user={this.state.currentUser}\n              messages={this.state.messages}\n              messagesUSM={this.state.userSpecificMessages}\n              messageColor={this.state.theme.messageColor} />\n            <SendMessage\n              onTextInput={this.handleChange}\n              textInputValue={this.state.userInput}\n              onEmojiClick={this.handleEmojiClick}\n              showEmojiPicker={this.state.showEmojiPicker}\n              onButtonClick={this.handleSubmit}\n              sendEmojiIntoApp={this.handleEmojiSelection}\n              sendGifToApp={this.handleGif}\n              onFormButtonClick={this.getGifInfoViaButton}\n            />\n          </div>\n          )\n          }\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}