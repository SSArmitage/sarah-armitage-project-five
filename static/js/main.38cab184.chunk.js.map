{"version":3,"sources":["firebase.js","Header.js","Settings.js","Footer.js","SendMessage.js","MessageList.js","SignInLogIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","Component","className","onClick","this","props","logOut","htmlFor","type","id","onChange","changeThemeColor","Footer","SendMessage","onSubmit","onButtonClick","rows","cols","placeholder","onTextInput","value","textInputValue","MessageList","divStyle","borderColor","messageColor","messages","map","message","style","SignInLogIn","onButtonClickSignUp","emailSignUp","passwordSignUp","onButtonClickSignIn","emailSignIn","passwordSignIn","App","handleChange","event","setState","userInput","target","handleSubmit","preventDefault","console","log","dbRef","database","ref","newMessagesArray","state","messageToBeAdded","length","push","shift","set","handleSignUpEmail","email","hanldeSignUpPassword","password","handleSignUpSubmit","auth","createUserWithEmailAndPassword","catch","error","handleSignInEmail","hanldeSignInPassword","handleSignInSubmit","signInWithEmailAndPassword","errorCode","code","errorMessage","handleLogOut","signOut","then","handleThemeColorChange","theme","uid","currentUser","child","themeColor","settingsPage","on","snapshot","messagesArray","val","onAuthStateChanged","user","usersInfo","displayName","photoURL","emailVerified","userUid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38cab184.chunk.js","sourcesContent":["// import firebase from node modules\nimport firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDbV1S2623FseOXa7X5Y3cRuUBY8Xx_Uv8\",\n    authDomain: \"chat-app-26edb.firebaseapp.com\",\n    databaseURL: \"https://chat-app-26edb.firebaseio.com\",\n    projectId: \"chat-app-26edb\",\n    storageBucket: \"chat-app-26edb.appspot.com\",\n    messagingSenderId: \"1057627994740\",\n    appId: \"1:1057627994740:web:77d4d8bb6632df674fef21\"\n};\n// Initialize Firebase using the config\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport Settings from './Settings';\n\nclass Header extends Component {\n    render() {\n        return(\n            <header>\n                <div className=\"wrapper\">\n                    <h1>Title</h1>\n                    <button onClick={this.props.logOut}>Log Out</button>\n                    <form>\n                        <label htmlFor=\"themeColor\">Pick Message Color Theme:</label>\n                        <input \n                        type=\"color\" \n                        id=\"themeColor\"\n                        onChange={this.props.changeThemeColor}/>\n\n                    </form>\n                </div>\n            </header>\n        );\n    };\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Settings extends Component {\n    render() {\n        return(\n            <div className=\"settings\">\n                <h2>Settings</h2>\n                <ul>\n                    <li><button onClick={this.props.settingsPage}>Settings</button></li>\n                    <li>Add/Change Username</li>\n                    <li>Add Profile Picture</li>\n                    <li onClick={this.props.changeTheme}>Change Theme</li>\n                </ul>\n            </div>\n        );\n    };\n}\n\nexport default Settings;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <div className=\"wrapper\">\n                    <p>Copyright Sarah Armitage 2019</p>\n                </div>\n            </footer>\n        );\n    };\n}\n\nexport default Footer;","import React, { Component } from 'react';\n\nclass SendMessage extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <form onSubmit={this.props.onButtonClick}>\n                    <label htmlFor=\"userMessage\"></label>\n                    {/* <input type=\"text\" id=\"userMessage\" /> */}\n                    <textarea \n                    rows=\"10\" \n                    cols=\"40\" \n                    placeholder=\"Enter message here\" \n                    id=\"userMessage\" \n                    onChange={this.props.onTextInput}\n                    value={this.props.textInputValue}>\n                    </textarea>\n                    <button>Send</button>\n                </form>\n            </div>\n        );\n    };\n}\n\nexport default SendMessage;","import React, { Component } from 'react';\n\nclass MessageList extends Component {\n    // constructor() {\n    //     super();\n    //     this.state = {\n    //         settingsPage: false\n    //     }\n    // }\n    render() {\n        // change color of message borders based on user selection (passed down as a prop from App.js)\n        let divStyle = {\n            borderColor: `${this.props.messageColor}`\n            // backgroundColor: 'purple',\n            // backgroundImage: 'url(' + imgUrl + ')',\n        };\n        return(\n            <div className=\"wrapper messageListContainer\">\n                    <div className=\"messageBox\">\n                        {this.props.messages.map((message) => {\n                            return (\n                                <li \n                                className=\"message\"\n                                style={divStyle} >\n                                {message}</li>\n                            )\n                        })}\n                    </div>\n            </div>\n        );\n    };\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SignInLogIn extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <div className=\"notSingedInPage\">\n                    <h2>Not signed in</h2>\n                    {/* Sign up user */}\n                    <form className=\"signUp\"\n                        onSubmit={this.props.onButtonClickSignUp}>\n                        <fieldset>\n                            <legend>Sign Up!</legend>\n                            <label htmlFor=\"email\">Email Address</label>\n                            <input \n                                type=\"email\" \n                                id=\"email\" \n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignUp}/>\n                            <label htmlFor=\"password\">Password</label>\n                            <input \n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignUp} />\n                            <button>Sign Up!</button>\n                        </fieldset>\n                    </form>\n\n                    {/* Sign in user */}\n                    <form \n                        className=\"login\"\n                        onSubmit={this.props.onButtonClickSignIn}>\n                        <fieldset>\n                            <legend>Sign In!</legend>\n                            <label htmlFor=\"email\">Email Address</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignIn} />\n                            <label htmlFor=\"password\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignIn} />\n                            <button>Sign In</button>\n                        </fieldset>\n                    </form>\n                </div>\n            </div> \n        );\n    };\n}\n\nexport default SignInLogIn;","import React, { Component } from 'react';\n// import styles\nimport './App.css';\n// import firebase\nimport firebase from './firebase';\n// import components\nimport Header from './Header';\nimport Footer from './Footer';\nimport SendMessage from './SendMessage';\nimport MessagesList from './MessageList';\nimport SignInLogIn from './SignInLogIn';\n\n// const messagesArray = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      userInput: '',\n      currentUser: null,\n      uid: '',\n      email: '',\n      password: '',\n      settingsPage: false,\n      theme: {\n        messageColor: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    // connect app to firebase (messages stored in the messages branch)\n    const dbRef = firebase.database().ref('messages');\n    \n    // when the database changes (newMessages array) grab the data in the database (will come back as an array)\n    dbRef.on('value', (snapshot) => {\n    const messagesArray = snapshot.val();\n    console.log(messagesArray);\n    \n    // set state with messagesArray from databse\n    this.setState({\n      messages: messagesArray\n    })\n\n    // grab the user's custom theme colour\n    // const dbRefUsers = firebase.database().ref('users');\n    // console.log(dbRefUsers);\n    });\n\n    // set an event listener for user login status\n    // listen for change in user auth status (is user logged in or not?)\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        console.log(\"I am logged in\");\n        console.log(user);\n        // if the user is signed it, set the user object to the current user in state (current user will go from null -> user object), this will conidtionally render the chat page\n        this.setState({\n          currentUser: user,\n          uid: user.uid\n        })\n\n        // grab the user's custom theme colour from the database and set that in state, so that the messages will be updated to have that color\n        const dbRefUsers = firebase.database().ref('users');\n        dbRefUsers.on('value', (snapshot) => {\n          const usersInfo = snapshot.val();\n          this.setState({\n            theme: {\n              messageColor: usersInfo[`${this.state.uid}`].themeColor\n            }\n          })\n        })\n\n\n      } else {\n        // No user is signed in.\n        // currentUser in state will be set to null, will show login page\n        console.log(\"I am not logged in\");\n        this.setState({\n          currentUser: null\n        })\n      }\n\n      // get user info (use this info to differenitate the users text bubbles?)\n      const currentUser = firebase.auth().currentUser;\n      if (currentUser != null) {\n        const userName = user.displayName;\n        const userEmail = user.email;\n        const userPhotoUrl = user.photoURL;\n        const userEmailVerified = user.emailVerified;\n        const userUid = user.uid;  // The user's ID, unique to the Firebase project. Do NOT use\n        // this value to authenticate with your backend server, if\n        // you have one. Use User.getToken( instead.\n        console.log(userUid);\n\n        \n      }\n    });\n    \n    // \n    // // grab the user's custom theme colour from the database\n    const dbRefUsers = firebase.database().ref('users');\n    dbRefUsers.on('value', (snapshot) => {\n      const usersInfo = snapshot.val();\n      // console.log(this.state.theme.messageColor);\n      \n      // console.log(usersInfo);\n      // // console.log(this.state.uid);\n      // const userObject = usersInfo[`${this.state.uid}`];\n      // console.log(userObject);\n      // console.log(this.state.uid);\n      \n      // const userObject = usersInfo[`${this.state.user}`];\n      // console.log(userObject);\n      // const userThemeSelection = userObject.themeColor;\n      // console.log(userThemeSelection);\n\n      // push the slected theme color up to the databsae (use set to replace the previous one)\n      // console.log(usersInfo.uid);\n      \n      // firebase.database().ref().child('users').child(this.state.uid).set(this.state.theme.messageColor)\n    })\n\n  } \n\n  handleChange = (event) => {\n    // console.log(`Hiii`);\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(`clicked button`);\n    // will use dbRef when pushing up the new array to the database\n    const dbRef = firebase.database().ref('messages');\n    // clone the array of database messages from state using spread\n    const newMessagesArray = [...this.state.messages];\n    console.log(\"cloned array\", newMessagesArray);\n    // grab the message inputted by the user (held in state)\n    const messageToBeAdded = this.state.userInput;\n    console.log(messageToBeAdded);\n  \n\n    \n    // add messageToBeAdded to the cloned array, and push that array up to firebase (use set to replace the previous array up there)\n    // first check to see if the length of the newMessagesArray is less than 100 \n    // also check if the message is just an empty string\n    // then add messageToBeAdded to newMessagesArray\n    // then set in firebase (so that the dbRef listener will will be called and it will update the this.state.messages and cause app to re-render with the new message added to the list of messages)\n\n    // if the user's input is not empty, enter statment:\n    if (messageToBeAdded !== '') {\n      console.log(\"I am not empty\");\n\n      // if the cloned messages array is less than 100:\n      if (newMessagesArray.length < 100) {\n        console.log(`there are less than 100 messages in here!`);\n        // add the new message to the array\n        newMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n        \n\n        // else if the cloned messages array is greater than 100:\n      } else {\n        // remove the first message from the array (index=0)\n        newMessagesArray.shift();\n        // then add the new message to the end\n        newMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n      }\n      // dbRef.set(newMessagesArray);\n\n    } else {\n      console.log(\"I am empty\");\n    }\n\n    // push the newMessagesArray up to firebase (set to replace)\n    dbRef.set(newMessagesArray);\n\n    // console.log(newMessagesArray);\n    // reset the userInput for the next message\n    this.setState({\n      userInput: ''\n    }); \n  }\n  // -------------------- AUTHENTICATION ---------------------\n  // grab user email for sign up\n  handleSignUpEmail = (event) => {\n   this.setState({\n     email: event.target.value\n   })\n  }\n\n  // grab user password for sign up\n  // need to put notifcation for user -> password needs to be > 6 characters long\n  hanldeSignUpPassword = (event) => {    \n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign up button\n  handleSignUpSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // create new account for user\n    firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\n      // handle errors here\n      console.log(error);\n    })\n  }\n\n  // grab user email for sign in\n  handleSignInEmail = (event) => {\n    this.setState({\n      email: event.target.value\n    })\n  }\n\n  // grab user password for sign in\n  hanldeSignInPassword = (event) => {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign in button\n  handleSignInSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // change in user auth status fires the auth event listener\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n    });\n  }\n\n  handleLogOut = (event) => {\n    // change in user auth status fires the auth event listener\n    firebase.auth().signOut().then(function () {\n      // Sign-out successful.\n      console.log(`I was signed out`);\n    }).catch(function (error) {\n      // An error happened.\n      console.log(error);\n    });\n  }\n  \n  // ---------------- END OF AUTHENTICATION ------------------\n\n  handleThemeColorChange = (event) => {\n    this.setState({\n      theme: {\n        messageColor: event.target.value\n      } \n    })\n    console.log(\"I picked a different color!\");\n    // console.log(event.target.value);\n    const uid = this.state.currentUser.uid\n    console.log(uid);\n    console.log(this.state.theme.messageColor);\n    \n    // push the theme color selected by the user up to firebase (save it in under the user's specific uid #)\n    // const uid = firebase.auth().currentUser.uid;\n    firebase.database().ref().child('users').child(uid).set({\n      themeColor: `${this.state.theme.messageColor}`\n    })\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        logOut={this.handleLogOut}\n        changeThemeColor={this.handleThemeColorChange} />\n        <main>\n          {this.state.currentUser === null \n\n          ? \n\n          <SignInLogIn \n          emailSignUp={this.handleSignUpEmail}\n          passwordSignUp={this.hanldeSignUpPassword}\n          onButtonClickSignUp={this.handleSignUpSubmit}\n          emailSignIn={this.handleSignInEmail}\n          passwordSignIn={this.hanldeSignInPassword}\n          onButtonClickSignIn={this.handleSignInSubmit}/>\n\n          : \n          \n          <div className=\"content\">\n            <p>signed in</p>\n            <MessagesList \n            messages={this.state.messages}\n            messageColor={this.state.theme.messageColor}/>\n            <SendMessage \n            onTextInput={this.handleChange} \n            textInputValue={this.state.userInput}\n            onButtonClick={this.handleSubmit}\n            />\n          </div>\n          }\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}