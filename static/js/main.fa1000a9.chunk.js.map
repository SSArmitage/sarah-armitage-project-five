{"version":3,"sources":["firebase.js","Header.js","Settings.js","Footer.js","SendMessage.js","MessageList.js","SignInLogIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","Component","className","onClick","this","props","logOut","htmlFor","type","id","value","onChange","changeThemeColor","onSubmit","onButtonClickUserName","username","userName","Footer","SendMessage","onButtonClick","rows","cols","placeholder","onTextInput","textInputValue","MessageList","messagesUSM","user","console","log","displayName","messageStyle","messageStyleOtherUser","array","messages","borderColor","messageColor","map","message","style","date","time","text","SignInLogIn","onButtonClickSignUp","emailSignUp","passwordSignUp","onButtonClickSignIn","emailSignIn","passwordSignIn","App","handleChange","event","setState","userInput","target","getDateAndTime","handleSubmit","preventDefault","dbRef","database","ref","dbRefUSM","newMessagesArray","Object","assign","state","newUserSpecificMessagesArray","userSpecificMessages","messageToBeAdded","currentUser","length","push","shift","set","handleSignUpEmail","email","hanldeSignUpPassword","password","handleSignUpSubmit","auth","createUserWithEmailAndPassword","catch","error","handleSignInEmail","hanldeSignInPassword","handleSignInSubmit","signInWithEmailAndPassword","errorCode","code","errorMessage","handleLogOut","signOut","then","handleUserName","handleSaveUserName","updateProfile","handleThemeColorChange","theme","uid","child","themeColor","day","Date","getDate","monthNumber","getMonth","year","getFullYear","dateFull","hours","getHours","min","getMinutes","sec","getSeconds","timeMilitary","i","timeNormal","x","unshift","timeIndex","indexOf","timeActual","messagesFiltered","settingsPage","on","snapshot","messagesArray","val","onAuthStateChanged","usersInfo","userUid","photoURL","emailVerified","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa1000a9.chunk.js","sourcesContent":["// import firebase from node modules\nimport firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDbV1S2623FseOXa7X5Y3cRuUBY8Xx_Uv8\",\n    authDomain: \"chat-app-26edb.firebaseapp.com\",\n    databaseURL: \"https://chat-app-26edb.firebaseio.com\",\n    projectId: \"chat-app-26edb\",\n    storageBucket: \"chat-app-26edb.appspot.com\",\n    messagingSenderId: \"1057627994740\",\n    appId: \"1:1057627994740:web:77d4d8bb6632df674fef21\"\n};\n// Initialize Firebase using the config\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport Settings from './Settings';\n\nclass Header extends Component {\n    render() {\n        return(\n            <header>\n                <div className=\"wrapper\">\n                    <h1>Title</h1>\n                    <button onClick={this.props.logOut}>Log Out</button>\n                    <form>\n                        <label htmlFor=\"themeColor\">Pick Message Color Theme:</label>\n                        <input \n                        type=\"color\" \n                        id=\"themeColor\"\n                        value=\"#ff34df\"\n                        onChange={this.props.changeThemeColor}/>\n                    </form>\n                    <form onSubmit={this.props.onButtonClickUserName}>\n                        <label>Add Username</label>\n                        <input \n                        type=\"text\"\n                        value={this.props.username}\n                        onChange={this.props.userName} />\n                        <button>Save</button>\n                    </form>\n                </div>\n            </header>\n        );\n    };\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Settings extends Component {\n    render() {\n        return(\n            <div className=\"settings\">\n                <h2>Settings</h2>\n                <ul>\n                    <li><button onClick={this.props.settingsPage}>Settings</button></li>\n                    <li>Add/Change Username</li>\n                    <li>Add Profile Picture</li>\n                    <li onClick={this.props.changeTheme}>Change Theme</li>\n                </ul>\n            </div>\n        );\n    };\n}\n\nexport default Settings;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <div className=\"wrapper\">\n                    <p>Copyright Sarah Armitage 2019</p>\n                </div>\n            </footer>\n        );\n    };\n}\n\nexport default Footer;","import React, { Component } from 'react';\n\nclass SendMessage extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <form onSubmit={this.props.onButtonClick}>\n                    <label htmlFor=\"userMessage\"></label>\n                    {/* <input type=\"text\" id=\"userMessage\" /> */}\n                    <textarea \n                    rows=\"10\" \n                    cols=\"40\" \n                    placeholder=\"Enter message here\" \n                    id=\"userMessage\" \n                    onChange={this.props.onTextInput}\n                    value={this.props.textInputValue}>\n                    </textarea>\n                    <button>Send</button>\n                </form>\n            </div>\n        );\n    };\n}\n\nexport default SendMessage;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nclass MessageList extends Component {\n    // constructor() {\n    //     super();\n    //     this.state = {\n    //         settingsPage: false\n    //     }\n    // }\n    render() {\n        // change color of message borders based on user selection (passed down as a prop from App.js)\n        const arrayUSM = this.props.messagesUSM\n        // don't think I need this user specific messages anymore??? (have usernames atatched to messages now)\n        const user = this.props.user;\n        console.log(user.displayName);\n        \n        const array = this.props.messages;\n        let messageStyle;\n        let messageStyleOtherUser;\n\n        messageStyle = {\n            borderColor: `${this.props.messageColor}`\n            // backgroundColor: 'purple',\n            // backgroundImage: 'url(' + imgUrl + ')',\n        };\n        // default color for the other users\n        messageStyleOtherUser = {\n            borderColor: 'blue'\n            // backgroundColor: 'purple',\n            // backgroundImage: 'url(' + imgUrl + ')',\n        };\n        return(\n            <div className=\"wrapper messageListContainer\">\n                    {/* <div className=\"messageBox\"> */}\n                    <ScrollToBottom className=\"messageBox\">\n                        {   \n                            \n                        array.map((message) => {\n                            if (message.username === user.displayName) {\n                                return(\n                                    <li\n                                        className=\"message currentUserPosition\"\n                                        style={messageStyle} >\n                                        <p \n                                        className=\"userName\">\n                                        {message.username}</p>\n                                        <p\n                                        className=\"dateAndTime\">\n                                        {`${message.date} ${message.time}`}</p>\n                                        <p \n                                        className=\"messageText\">\n                                        {message.text}</p>\n                                    </li>\n                                )\n                            } else {\n                                return(\n                                    <li\n                                        className=\"message\"\n                                        style={messageStyleOtherUser} >\n                                        <p \n                                        className=\"userName\">{message.username}</p>\n                                        <p\n                                        className=\"messageText\">\n                                        {message.text}</p>\n                                    </li>\n                                )\n                            }\n                        })}\n                    </ScrollToBottom>\n                    {/* </div> */}\n            </div>\n        );\n    };\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SignInLogIn extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <div className=\"notSingedInPage\">\n                    <h2>Not signed in</h2>\n                    {/* Sign up user */}\n                    <form className=\"signUp\"\n                        onSubmit={this.props.onButtonClickSignUp}>\n                        <fieldset>\n                            <legend>Sign Up!</legend>\n                            <label htmlFor=\"email\">Email Address</label>\n                            <input \n                                type=\"email\" \n                                id=\"email\" \n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignUp}/>\n                            <label htmlFor=\"password\">Password</label>\n                            <input \n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignUp} />\n                            <button>Sign Up!</button>\n                        </fieldset>\n                    </form>\n\n                    {/* Sign in user */}\n                    <form \n                        className=\"login\"\n                        onSubmit={this.props.onButtonClickSignIn}>\n                        <fieldset>\n                            <legend>Sign In!</legend>\n                            <label htmlFor=\"email\">Email Address</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignIn} />\n                            <label htmlFor=\"password\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignIn} />\n                            <button>Sign In</button>\n                        </fieldset>\n                    </form>\n                </div>\n            </div> \n        );\n    };\n}\n\nexport default SignInLogIn;","import React, { Component } from 'react';\n// import styles\nimport './App.css';\n// import firebase\nimport firebase from './firebase';\n// import components\nimport Header from './Header';\nimport Footer from './Footer';\nimport SendMessage from './SendMessage';\nimport MessagesList from './MessageList';\nimport SignInLogIn from './SignInLogIn';\n\n// const messagesArray = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      userSpecificMessages: [],\n      messagesFiltered: [],\n      userInput: '',\n      currentUser: null,\n      username: '',\n      uid: '',\n      email: '',\n      password: '',\n      settingsPage: false,\n      theme: {\n        messageColor: ''\n      },\n      date: '',\n      time: ''\n    }\n  }\n\n  componentDidMount() {\n    // connect app to firebase (messages stored in the messages branch)\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    \n    // when the database changes (newMessages array) grab the data in the database (will come back as an array)\n    dbRef.on('value', (snapshot) => {\n    const messagesArray = snapshot.val();\n    console.log(messagesArray);\n    \n    // set state with messagesArray from databse\n    this.setState({\n      messages: messagesArray\n    })\n\n    // grab the user's custom theme colour\n    // const dbRefUsers = firebase.database().ref('users');\n    // console.log(dbRefUsers);\n    });\n\n    dbRefUSM.on('value', (snapshot) => {\n      const messagesArray = snapshot.val();\n      console.log(messagesArray);\n\n      // set state with messagesArray from databse\n      this.setState({\n        userSpecificMessages: messagesArray\n      })\n    });\n\n    // set an event listener for user login status\n    // listen for change in user auth status (is user logged in or not?)\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        console.log(\"I am logged in\");\n        console.log(user);\n        // if the user is signed it, set the user object to the current user in state (current user will go from null -> user object), this will conidtionally render the chat page\n        this.setState({\n          currentUser: user,\n          uid: user.uid\n        })\n\n        // grab the user's custom theme colour from the database and set that in state, so that the messages will be updated to have that color\n        const dbRefUsers = firebase.database().ref('users');\n        dbRefUsers.on('value', (snapshot) => {\n          const usersInfo = snapshot.val();\n          this.setState({\n            theme: {\n              messageColor: usersInfo[`${this.state.uid}`].themeColor\n            }\n          })\n        })\n\n\n      } else {\n        // No user is signed in.\n        // currentUser in state will be set to null, will show login page\n        console.log(\"I am not logged in\");\n        this.setState({\n          currentUser: null\n        })\n      }\n\n      // get user info (use this info to differenitate the users text bubbles?)\n      const currentUser = firebase.auth().currentUser;\n      if (currentUser != null) {\n        const userName = user.displayName;\n        const userEmail = user.email;\n        const userPhotoUrl = user.photoURL;\n        const userEmailVerified = user.emailVerified;\n        const userUid = user.uid;  // The user's ID, unique to the Firebase project. Do NOT use\n        // this value to authenticate with your backend server, if\n        // you have one. Use User.getToken( instead.\n        console.log(userUid);\n        console.log(userName);\n        \n      }\n    });\n    \n    // \n    // // grab the user's custom theme colour from the database\n    const dbRefUsers = firebase.database().ref('users');\n    dbRefUsers.on('value', (snapshot) => {\n      const usersInfo = snapshot.val();\n      // console.log(this.state.theme.messageColor);\n      \n      // console.log(usersInfo);\n      // // console.log(this.state.uid);\n      // const userObject = usersInfo[`${this.state.uid}`];\n      // console.log(userObject);\n      // console.log(this.state.uid);\n      \n      // const userObject = usersInfo[`${this.state.user}`];\n      // console.log(userObject);\n      // const userThemeSelection = userObject.themeColor;\n      // console.log(userThemeSelection);\n\n      // push the slected theme color up to the databsae (use set to replace the previous one)\n      // console.log(usersInfo.uid);\n      \n      // firebase.database().ref().child('users').child(this.state.uid).set(this.state.theme.messageColor)\n    });\n\n    // set an event listener for \n  } \n\n  handleChange = (event) => {\n    // console.log(`Hiii`);\n    this.setState({\n      userInput: event.target.value\n    })\n    // when user types message, grab the date and time\n    this.getDateAndTime();\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(`clicked button`);\n    // will use dbRef when pushing up the new array to the database\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    // clone the array of database messages from state using spread\n    // const newMessagesArray = [...this.state.messages];\n    // const newUserSpecificMessagesArray = [...this.state.userSpecificMessages];\n    // console.log(\"cloned array\", newMessagesArray);\n\n    // clone the array of databast message objects from state using Object.assign method\n    // cant use spread b/c it is a shalow copy and woulndt copy the nested elements\n    const newMessagesArray = [];\n    Object.assign(newMessagesArray, this.state.messages);\n    console.log(\"cloned array\", newMessagesArray);\n    const newUserSpecificMessagesArray = [];\n    Object.assign(newUserSpecificMessagesArray, this.state.userSpecificMessages);\n    console.log(\"cloned array\", newUserSpecificMessagesArray);\n\n    // grab the message inputted by the user (held in state)\n    // const messageToBeAdded = this.state.userInput;\n    const messageToBeAdded = {\n      username: this.state.currentUser.displayName,\n      text: this.state.userInput,\n      date: this.state.date,\n      time: this.state.time\n    };\n    console.log(messageToBeAdded);\n  \n\n    \n    // add messageToBeAdded to the cloned array, and push that array up to firebase (use set to replace the previous array up there)\n    // first check to see if the length of the newMessagesArray is less than 100 \n    // also check if the message is just an empty string\n    // then add messageToBeAdded to newMessagesArray\n    // then set in firebase (so that the dbRef listener will will be called and it will update the this.state.messages and cause app to re-render with the new message added to the list of messages)\n\n    // if the user's input is not empty, enter statment:\n    if (messageToBeAdded.text !== '') {\n      console.log(\"I am not empty\");\n\n      // if the cloned messages array is less than 100:\n      if (newMessagesArray.length < 100) {\n        console.log(`there are less than 100 messages in here!`);\n        // add the new message to the array\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n        \n\n        // else if the cloned messages array is greater than 100:\n      } else {\n        // remove the first message from the array (index=0)\n        newMessagesArray.shift();\n        newUserSpecificMessagesArray.shift();\n        // then add the new message to the end\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n      }\n      // dbRef.set(newMessagesArray);\n\n    } else {\n      console.log(\"I am empty\");\n    }\n\n    // push the newMessagesArray up to firebase (set to replace)\n    dbRef.set(newMessagesArray);\n    dbRefUSM.set(newUserSpecificMessagesArray);\n\n    // ****************************************\n    // filter through arrays\n    // const twoArray = this.state.messages;\n    // const oneArray = this.state.userSpecificMessages;\n    // twoArray.forEach((message) => {\n    //   if (oneArray.includes(message)) {\n    //     console.log(message);\n        \n    //   }\n    // })\n\n    // console.log(newMessagesArray);\n    // reset the userInput for the next message\n    // reset the date and time for next message\n    this.setState({\n      userInput: '',\n      date: '',\n      time: ''\n    }); \n  }\n  // -------------------- AUTHENTICATION ---------------------\n  // grab user email for sign up\n  handleSignUpEmail = (event) => {\n   this.setState({\n     email: event.target.value\n   })\n  }\n\n  // grab user password for sign up\n  // need to put notifcation for user -> password needs to be > 6 characters long\n  hanldeSignUpPassword = (event) => {    \n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign up button\n  handleSignUpSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // create new account for user\n    firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\n      // handle errors here\n      console.log(error);\n    })\n  }\n\n  // grab user email for sign in\n  handleSignInEmail = (event) => {\n    this.setState({\n      email: event.target.value\n    })\n  }\n\n  // grab user password for sign in\n  hanldeSignInPassword = (event) => {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign in button\n  handleSignInSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // change in user auth status fires the auth event listener\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n    });\n  }\n\n  handleLogOut = (event) => {\n    // change in user auth status fires the auth event listener\n    firebase.auth().signOut().then(function () {\n      // Sign-out successful.\n      console.log(`I was signed out`);\n    }).catch(function (error) {\n      // An error happened.\n      console.log(error);\n    });\n  }\n\n  // grab user's desire username \n  handleUserName = (event) => {\n    this.setState({\n      username: event.target.value\n    })\n  }\n  // send username to firebase auth\n  handleSaveUserName = (event) => {\n    event.preventDefault();\n\n    const user = firebase.auth().currentUser;\n    const userName = user.displayName;\n    user.updateProfile({\n      displayName: this.state.username,\n      // photoURL: \"https://example.com/jane-q-user/profile.jpg\"\n    }).then(function () {\n      // Update successful.\n      console.log('successfully updated username');\n      const userName = user.displayName;\n      console.log(userName);\n      \n    }).catch(function (error) {\n      // An error happened.\n      console.log('did not successfully updated username');\n    });\n\n    this.setState({\n      username: ''\n    });\n  }\n\n\n  \n  // ---------------- END OF AUTHENTICATION ------------------\n\n  handleThemeColorChange = (event) => {\n    this.setState({\n      theme: {\n        messageColor: event.target.value\n      } \n    })\n    console.log(\"I picked a different color!\");\n    // console.log(event.target.value);\n    const uid = this.state.currentUser.uid\n    console.log(uid);\n    console.log(this.state.theme.messageColor);\n    \n    // push the theme color selected by the user up to firebase (save it in under the user's specific uid #)\n    // const uid = firebase.auth().currentUser.uid;\n    firebase.database().ref().child('users').child(uid).set({\n      themeColor: `${this.state.theme.messageColor}`\n    })\n    \n  }\n\n  // function to grab the date and time (to use in messages)\n  getDateAndTime = () => {\n    // get the date\n    const day = new Date().getDate(); //Current Day\n    const monthNumber = new Date().getMonth(); //Current Month\n    const year = new Date().getFullYear(); //Current Year\n    // convert monthNumber into monthYear\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const monthWord = months[monthNumber];\n    const dateFull = `${monthWord} ${day}, ${year}`;\n    console.log(dateFull);\n    // get the time\n    const hours = new Date().getHours(); //Current Hours\n    const min = new Date().getMinutes(); //Current Minutes\n    const sec = new Date().getSeconds(); //Current Seconds\n    console.log(`${hours} ${min} ${sec}`);\n    // make 24hour clock array\n    const timeMilitary = []\n    for (let i = 0; i <= 24; i++) {\n      timeMilitary.push(i);\n    }\n    console.log(timeMilitary);\n\n    // make the 12hour clock array\n    const timeNormal = [];\n    for (let x = 1; x <= 2; x++) {\n      for (let i = 1; i <= 12; i++) {\n        timeNormal.push(i);\n      }\n    }\n    timeNormal.unshift(12)\n    console.log(timeNormal);\n\n    // convert the 24hour clock time into 12hour clock time\n    const timeIndex = timeMilitary.indexOf(hours);\n    console.log(\"the time index is:\", timeIndex);\n    const time = timeNormal[timeIndex];\n    // have: 14 22 31\n    // need: 2:22\n    console.log(time);\n    const timeActual = `${time}:${min}`;\n    console.log(timeActual);\n\n    // ---------------------------\n    // The final date and time stamp\n    // use: dateFull & timeActual\n    // ---------------------------\n\n    // save the date and time in state (will be grabbed and attached to \"message\" when user clicks submit button)\n    this.setState({\n      date: dateFull,\n      time: timeActual\n    })\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        logOut={this.handleLogOut}\n        changeThemeColor={this.handleThemeColorChange}\n        username={this.state.username}\n        userName={this.handleUserName} \n        onButtonClickUserName={this.handleSaveUserName}/>\n        <main>\n          {this.state.currentUser === null \n\n          ? \n\n          <SignInLogIn \n          emailSignUp={this.handleSignUpEmail}\n          passwordSignUp={this.hanldeSignUpPassword}\n          onButtonClickSignUp={this.handleSignUpSubmit}\n          emailSignIn={this.handleSignInEmail}\n          passwordSignIn={this.hanldeSignInPassword}\n          onButtonClickSignIn={this.handleSignInSubmit}/>\n\n          : \n          \n          <div className=\"content\">\n            <p>signed in</p>\n            <MessagesList \n            user={this.state.currentUser}\n            messages={this.state.messages}\n            messagesUSM={this.state.userSpecificMessages}\n            messageColor={this.state.theme.messageColor}/>\n            <SendMessage \n            onTextInput={this.handleChange} \n            textInputValue={this.state.userInput}\n            onButtonClick={this.handleSubmit}\n            />\n          </div>\n          }\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}