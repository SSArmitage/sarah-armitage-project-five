{"version":3,"sources":["firebase.js","Settings.js","Header.js","Footer.js","EmojiPicker.js","SendMessage.js","MessageList.js","SignInLogIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Settings","className","onSubmit","this","props","onButtonClickUserName","id","type","value","username","onChange","userName","onClick","logOut","Component","Header","userChange","handleSettingsClick","class","Footer","EmojiPicker","useState","chosenEmoji","setChosenEmoji","emoji","onEmojiClick","event","emojiObject","SendMessage","onButtonClick","htmlFor","rows","cols","placeholder","onTextInput","textInputValue","showEmojiPicker","MessageList","user","console","log","displayName","messageStyle","messageStyleOtherUser","array","messages","backgroundColor","map","message","style","date","time","text","SignInLogIn","onButtonClickSignUp","emailSignUp","required","passwordSignUp","title","onButtonClickSignIn","emailSignIn","passwordSignIn","App","handleChange","setState","userInput","target","getDateAndTime","handleSubmit","preventDefault","dbRef","database","ref","dbRefUSM","newMessagesArray","Object","assign","state","newUserSpecificMessagesArray","userSpecificMessages","messageToBeAdded","currentUser","userId","uid","length","push","shift","set","handleSignUpEmail","email","hanldeSignUpPassword","password","handleSignUpSubmit","alert","auth","createUserWithEmailAndPassword","catch","error","handleSignInEmail","hanldeSignInPassword","handleSignInSubmit","signInWithEmailAndPassword","code","settingsPageClicked","handleLogOut","signOut","then","handleUserName","handleSaveUserName","updateProfile","updateUserNameInDB","forEach","handleThemeColorChange","theme","messageColor","child","themeColor","day","Date","getDate","monthNumber","getMonth","year","getFullYear","dateFull","hours","getHours","min","getMinutes","timeMilitary","getSeconds","i","timeNormal","x","unshift","indexOf","timeActual","handleEmojiClick","newState","hanldleColorChange","messagesFiltered","selectedColorOption","userComputer","userSignedIn","on","snapshot","messagesArray","val","onAuthStateChanged","photoURL","emailVerified","headerChange","handleColorChange","messagesUSM","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4cdfce7f.chunk.js","sourcesContent":["// import firebase from node modules\nimport firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDbV1S2623FseOXa7X5Y3cRuUBY8Xx_Uv8\",\n    authDomain: \"chat-app-26edb.firebaseapp.com\",\n    databaseURL: \"https://chat-app-26edb.firebaseio.com\",\n    projectId: \"chat-app-26edb\",\n    storageBucket: \"chat-app-26edb.appspot.com\",\n    messagingSenderId: \"1057627994740\",\n    appId: \"1:1057627994740:web:77d4d8bb6632df674fef21\"\n};\n// Initialize Firebase using the config\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\n\nclass Settings extends Component {\n    render() {\n        return(\n            <div className=\"settings\">\n                <div className=\"wrapper flexContainer\">\n                    <div className=\"settingsFormContainer\">\n                        <h2>Settings</h2>\n                        <ul>\n                            <li>\n                                <form onSubmit={this.props.onButtonClickUserName}>\n                                    \n                                        <h3>Add/Change Username</h3>\n                                        {/* <label htmlFor=\"username\">Add/Change Username</label> */}\n                                        <input\n                                            id=\"username\"\n                                            type=\"text\"\n                                            value={this.props.username}\n                                            onChange={this.props.userName} />\n                                        <button>Save</button>\n                                    \n                                </form>\n                            </li>\n                            {/* adding these in but not working yet */}\n                            {/* <li>\n                                <form>\n                                    <label>Add/Change Display Picture</label>\n                                </form>\n                            </li> */}\n                            {/* <li>\n                                <form>\n                                    <h3>Change Color Theme</h3>\n                                    <div className=\"colorChoices\">\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color1\"></label>\n                                            <div className=\"color1\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color1\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color1'}\n                                            value=\"color1\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n                                        \n                                        <div className=\"color\">\n                                            <label htmlFor=\"color2\"></label>\n                                            <div className=\"color2\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color2\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color2'}\n                                            value=\"color2\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color3\"></label>\n                                            <div className=\"color3\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color3\"\n                                            name=\"colorChoice\"\n                                            checked={\n                                            (event, 'color3') => {\n                                                this.props.selectedColorOption\n                                            }}\n                                            value=\"color3\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color4\"></label>\n                                            <div className=\"color4\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color4\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color4'}\n                                            value=\"color4\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n\n                                        <div className=\"color\">\n                                            <label htmlFor=\"color5\"></label>\n                                            <div className=\"color5\"></div>\n                                            <input \n                                            type=\"radio\" \n                                            id=\"color5\"\n                                            name=\"colorChoice\"\n                                            checked={this.props.selectedColorOption = 'color5'}\n                                            value=\"color5\"\n                                            onClick={this.props.handleColorChange}/>\n                                        </div>\n                                    </div>\n                                    <button>Save</button>\n                                </form>\n                            </li> */}\n                            {/* <li>\n                                <form>\n                                        <label>Change Font Size</label>\n                                </form>\n                            </li> */}\n                            <button onClick={this.props.logOut}>Log Out</button>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Settings;","import React, { Component } from 'react';\nimport Settings from './Settings';\n\nclass Header extends Component {\n    render() {\n        return(\n            <div>\n            {this.props.userChange === false\n\n            ?\n\n                <header className=\"headerSignedOutPage\">\n                    <div className=\"wrapper flexContainer\">\n                        <h1>Chat App</h1>\n                        <div\n                            className=\"iconContainer\"\n                            onClick={this.props.handleSettingsClick}>\n                            <i class=\"fas fa-bars\"></i>\n                        </div>\n                    </div>\n                </header>\n            \n\n            :\n\n                <header className=\"headerSignedInPage\">\n                    <div className=\"wrapper flexContainer\">\n                        <h1>Chat App</h1>\n                        <div\n                            className=\"iconContainer\"\n                            onClick={this.props.handleSettingsClick}>\n                            <i class=\"fas fa-bars\"></i>\n                        </div>\n                    </div>\n                </header>\n        }\n            </div >\n\n            \n        );\n    };\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <div className=\"wrapper flexContainer\">\n                    <p>Copyright Sarah Armitage 2019</p>\n                </div>\n            </footer>\n        );\n    };\n}\n\nexport default Footer;","import React, { useState } from 'react';\nimport Picker from 'emoji-picker-react';\n\nconst EmojiPicker = () => {\n    const [chosenEmoji, setChosenEmoji] = useState(null);\n\n    const onEmojiClick = (event, emojiObject) => {\n        setChosenEmoji(emojiObject);\n    }\n\n    return (\n        <div>\n            {\n                chosenEmoji\n                    ? (<span>You chose: {chosenEmoji.emoji}</span>)\n                    : <span>No emoji Chosen</span>\n\n            }\n            <Picker onEmojiClick={onEmojiClick} />\n        </div>\n    );\n}\n\nexport default EmojiPicker;","import React, { Component } from 'react';\nimport EmojiPicker from './EmojiPicker';\n\nclass SendMessage extends Component {\n    render() {\n        return(\n            <div className=\"sendMessageArea\">\n                <div className=\"wrapper flexContainer\">\n                    <form onSubmit={this.props.onButtonClick}>\n                            <label htmlFor=\"userMessage\"></label>\n                            <textarea \n                            rows=\"10\" \n                            cols=\"40\" \n                            placeholder=\"Enter message here\" \n                            id=\"userMessage\" \n                            onChange={this.props.onTextInput}\n                            value={this.props.textInputValue}>\n                            </textarea>\n                            <div\n                            className=\"sendAndEmojiContainer\">\n                                <button \n                                className=\"emojiIcon\"\n                                onClick={this.props.onEmojiClick}>\n                                    <i class=\"far fa-laugh\"></i>\n                                </button>\n                                <button>Send</button>   \n                            </div>\n                            \n                        {this.props.showEmojiPicker \n                        ? \n                        <div className=\"emojiPicker\">\n                            <EmojiPicker />\n                        </div> \n                        :\n                        null}\n                    </form>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default SendMessage;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nclass MessageList extends Component {\n    render() {\n        // change color of message borders based on user selection (passed down as a prop from App.js)\n        // const arrayUSM = this.props.messagesUSM\n        // don't think I need this user specific messages anymore??? (have usernames atatched to messages now)\n        const user = this.props.user;\n        console.log(user.displayName);\n        \n        const array = this.props.messages;\n        let messageStyle;\n        let messageStyleOtherUser;\n\n        messageStyle = {\n            backgroundColor: 'blueviolet'\n        };\n        // default color for the other users\n        messageStyleOtherUser = {\n            backgroundColor: '#0392cf'\n        };\n\n        // find the uid associated with the username and match based on that for color\n        return(\n\n            <div className=\"messageArea\">\n                <div className=\"wrapper messageListContainer\">\n                        <ScrollToBottom className=\"messageBox\">\n                            {   \n                                \n                            array.map((message) => {\n                                if (message.username === user.displayName) {\n                                    return(\n                                        <li\n                                            className=\"message currentUserPosition\"\n                                            style={messageStyle} >\n                                            <p \n                                            className=\"userName\">\n                                            {message.username}</p>\n                                            <p\n                                            className=\"dateAndTime\">\n                                            {`${message.date} ${message.time}`}</p>\n                                            <p \n                                            className=\"messageText\">\n                                            {message.text}</p>\n                                        </li>\n                                    )\n                                } else {\n                                    return(\n                                        <li\n                                            className=\"message\"\n                                            style={messageStyleOtherUser} >\n                                            <p \n                                            className=\"userName\">{message.username}</p>\n                                            <p\n                                            className=\"dateAndTime\">\n                                            {`${message.date} ${message.time}`}</p>\n                                            <p\n                                            className=\"messageText\">\n                                            {message.text}</p>\n                                        </li>\n                                    )\n                                }\n                            })}\n                        </ScrollToBottom>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SignInLogIn extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <div className=\"notSingedInPage\">\n                    <form className=\"signUp\"\n                        onSubmit={this.props.onButtonClickSignUp}>\n                            <h2>Sign Up</h2>\n                            {/* working on making this username input work */}\n                            {/* <label htmlFor=\"displayName\">Username:</label>\n                            <input \n                                type=\"text\" \n                                id=\"displayName\" \n                                placeholder=\"Username\"\n                                required/> */}\n                            <label htmlFor=\"email\">Email Address:</label>\n                            <input \n                                type=\"email\" \n                                id=\"email\" \n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignUp}\n                                required/>\n                            <label htmlFor=\"password\">Password:</label>\n                            <input \n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignUp} \n                                required\n                                title=\"8 characters minimum\"/>\n                            <button>Sign Up</button>\n                    </form>\n\n                    {/* Sign in user */}\n                    <form \n                        className=\"login\"\n                        onSubmit={this.props.onButtonClickSignIn}>\n                            <h2>Sign In</h2>\n                            <label htmlFor=\"email\">Email Address:</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignIn} \n                                required/>\n                            <label htmlFor=\"password\">Password:</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignIn} \n                                required/>\n                            <button>Sign In</button>\n                    </form>\n                </div>\n            </div> \n        );\n    };\n}\n\nexport default SignInLogIn;","import React, { Component } from 'react';\n// import styles\nimport './App.css';\n// import firebase\nimport firebase from './firebase';\n// import components\nimport Header from './Header';\nimport Footer from './Footer';\nimport SendMessage from './SendMessage';\nimport MessagesList from './MessageList';\nimport SignInLogIn from './SignInLogIn';\nimport Settings from './Settings';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      userSpecificMessages: [],\n      messagesFiltered: [],\n      userInput: '',\n      currentUser: null,\n      username: '',\n      uid: '',\n      email: '',\n      password: '',\n      settingsPageClicked: true,\n      selectedColorOption: '',\n      theme: {\n        messageColor: ''\n      },\n      date: '',\n      time: '',\n      userComputer: '',\n      showEmojiPicker: false,\n      userSignedIn: false\n    }\n  }\n\n  componentDidMount() {\n    // connect app to firebase (messages stored in the messages branch)\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    \n    // when the database changes (newMessages array) grab the data in the database (will come back as an array)\n    dbRef.on('value', (snapshot) => {\n    const messagesArray = snapshot.val();\n    \n    // set state with messagesArray from databse\n    this.setState({\n      messages: messagesArray\n    })\n    });\n\n    // set an event listener for user login status\n    // listen for change in user auth status (is user logged in or not?)\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        // if the user is signed it, set the user object to the current user in state (current user will go from null -> user object), this will conidtionally render the chat page\n        this.setState({\n          currentUser: user,\n          uid: user.uid\n        })\n\n        // ******** working on this functionality *********\n        // grab the user's custom theme colour from the database and set that in state, so that the messages will be updated to have that color\n        // const dbRefUsers = firebase.database().ref('users');\n        // dbRefUsers.on('value', (snapshot) => {\n        //   const usersInfo = snapshot.val();\n        //   this.setState({\n        //     theme: {\n        //       messageColor: usersInfo[`${this.state.uid}`].themeColor\n        //     }\n        //   })\n        // })\n\n\n      } else {\n        // No user is signed in.\n        // currentUser in state will be set to null, will show login page\n        this.setState({\n          currentUser: null\n        })\n      }\n\n      // get user info (use this info to differenitate the users text bubbles)\n      const currentUser = firebase.auth().currentUser;\n      if (currentUser != null) {\n        const userName = user.displayName;\n        const userEmail = user.email;\n        const userPhotoUrl = user.photoURL;\n        const userEmailVerified = user.emailVerified;\n        const userUid = user.uid;  // The user's ID, unique to the Firebase project\n      }\n    });\n  } \n\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n    // when user types message, grab the date and time\n    this.getDateAndTime();\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    // will use dbRef when pushing up the new array to the database\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n\n    // clone the array of databast message objects from state using Object.assign method\n    // cant use spread b/c it is a shalow copy and woulndt copy the nested elements\n    const newMessagesArray = [];\n    Object.assign(newMessagesArray, this.state.messages);\n    const newUserSpecificMessagesArray = [];\n    Object.assign(newUserSpecificMessagesArray, this.state.userSpecificMessages);\n\n    // grab the message inputted by the user (held in state)\n    const messageToBeAdded = {\n      username: this.state.currentUser.displayName,\n      userId: this.state.currentUser.uid,\n      text: this.state.userInput,\n      date: this.state.date,\n      time: this.state.time\n    };\n\n    // add messageToBeAdded to the cloned array, and push that array up to firebase (use set to replace the previous array up there)\n    // first check to see if the length of the newMessagesArray is less than 100 \n    // also check if the message is just an empty string\n    // then add messageToBeAdded to newMessagesArray\n    // then set in firebase (so that the dbRef listener will will be called and it will update the this.state.messages and cause app to re-render with the new message added to the list of messages)\n\n    // if the user's input is not empty, enter statment:\n    if (messageToBeAdded.text !== '') {\n      // if the cloned messages array is less than 100:\n      if (newMessagesArray.length < 100) {\n        // add the new message to the array\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n\n        // else if the cloned messages array is greater than 100:\n      } else {\n        // remove the first message from the array (index=0)\n        newMessagesArray.shift();\n        newUserSpecificMessagesArray.shift();\n        // then add the new message to the end\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n      }\n      // else message is empty\n    }\n\n    // push the newMessagesArray up to firebase (set to replace)\n    dbRef.set(newMessagesArray);\n    dbRefUSM.set(newUserSpecificMessagesArray);\n\n    // reset the userInput for the next message\n    // reset the date and time for next message\n    this.setState({\n      userInput: '',\n      date: '',\n      time: ''\n    }); \n  }\n\n  // -------------------- AUTHENTICATION ---------------------\n  // grab user email for sign up\n  handleSignUpEmail = (event) => {\n   this.setState({\n     email: event.target.value\n   })\n  }\n\n  // grab user password for sign up\n  // need to put notifcation for user -> password needs to be > 6 characters long\n  hanldeSignUpPassword = (event) => {    \n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign up button\n  handleSignUpSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.password.length < 6) {\n      alert('Your password must be 6 characters or longer');\n    }\n    // create new account for user\n    firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\n      // handle errors here\n    })\n  }\n\n  // grab user email for sign in\n  handleSignInEmail = (event) => {\n    this.setState({\n      email: event.target.value\n    })\n  }\n\n  // grab user password for sign in\n  hanldeSignInPassword = (event) => {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign in button\n  handleSignInSubmit = (event) => {\n    event.preventDefault();\n\n    // change in user auth status fires the auth event listener\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // handle incorrect sign in password\n      alert('You have entered either an incorrect email or password');\n    });\n    // make sure the settings page is closed when user logs out\n    this.setState({\n      settingsPageClicked: false\n    })\n  }\n\n  handleLogOut = (event) => {\n    // change in user auth status fires the auth event listener\n    firebase.auth().signOut().then(function () {\n      // Sign-out successful.\n    }).catch(function (error) {\n      // An error happened.\n    });\n  }\n\n  // grab user's desired username \n  handleUserName = (event) => {\n    this.setState({\n      username: event.target.value\n    })\n  }\n  // send username to firebase auth on button submit\n  handleSaveUserName = (event) => {\n    event.preventDefault();\n\n    const user = firebase.auth().currentUser;\n    const userName = user.displayName;\n    user.updateProfile({\n      displayName: this.state.username,\n      // going to add the ability to add display picture\n      // photoURL: \"https://example.com/jane-q-user/profile.jpg\"\n    }).then(function () {\n      // Update successful.\n      const userName = user.displayName;\n      \n    }).then(() => {\n      // call fxn to update username in databse (ensures it stays up to date in the message history)\n      this.updateUserNameInDB()\n    }).catch(function (error) {\n      // An error happened.\n    });\n\n    this.setState({\n      username: '',\n      settingsPageClicked: !this.state.settingsPageClicked\n    });\n  }\n\n  // function to update username is database messages when the user changes their username\n  updateUserNameInDB = () => {\n    // reference to firebase, will use when sending array of messages with updated usernmes back up tp the DB\n    const dbRef = firebase.database().ref('messages');\n    const newMessagesArray = [];\n    // make a copy of the array held in this.state.messages (most recent copy of the mesages in firebase) and save it to an array called newMessagesArray\n    Object.assign(newMessagesArray, this.state.messages);\n\n    // keep the username up to date for all messages of a user (when/if a user changes their username, want to update all the messages they sent to have the current username)\n    newMessagesArray.forEach((message) => {\n      // if the userId of the message matches the current user's Id, then update that message to have the users current username\n      if (message.userId === this.state.currentUser.uid) {\n        message.username = this.state.currentUser.displayName\n      }\n    })\n    // once the array has been updated so that all the messages have the enw username, push that array up to firebase (this will cause a re-render and this.state.messages will be updated with the new array, and you will see the new username reflected in all the preivious messages)\n    dbRef.set(newMessagesArray);\n  }\n  \n  // ---------------- END OF AUTHENTICATION ------------------\n\n  handleThemeColorChange = (event) => {\n    this.setState({\n      theme: {\n        messageColor: event.target.value\n      } \n    })\n    const uid = this.state.currentUser.uid;\n    \n    // push the theme color selected by the user up to firebase (save it in under the user's specific uid #)\n    firebase.database().ref().child('users').child(uid).set({\n      themeColor: `${this.state.theme.messageColor}`\n    })\n  }\n\n  // function to grab the date and time (to use in messages)\n  getDateAndTime = () => {\n    // get the date\n    const day = new Date().getDate(); //Current Day\n    const monthNumber = new Date().getMonth(); //Current Month\n    const year = new Date().getFullYear(); //Current Year\n    // convert monthNumber into monthYear\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const monthWord = months[monthNumber];\n    const dateFull = `${monthWord} ${day}, ${year}`;\n    // get the time\n    const hours = new Date().getHours(); //Current Hours\n    const min = new Date().getMinutes(); //Current Minutes\n    const sec = new Date().getSeconds(); //Current Seconds\n    // make 24hour clock array\n    const timeMilitary = []\n    for (let i = 0; i <= 24; i++) {\n      timeMilitary.push(i);\n    }\n\n    // make the 12hour clock array\n    const timeNormal = [];\n    for (let x = 1; x <= 2; x++) {\n      for (let i = 1; i <= 12; i++) {\n        timeNormal.push(i);\n      }\n    }\n    timeNormal.unshift(12)\n\n    // convert the 24hour clock time into 12hour clock time\n    const timeIndex = timeMilitary.indexOf(hours);\n    const time = timeNormal[timeIndex];\n    // i.e. have: 14 22 31\n    // need: 2:22\n    const timeActual = `${time}:${min}`;\n\n    // ---------------------------\n    // The final date and time stamp\n    // use: dateFull & timeActual\n    // ---------------------------\n\n    // save the date and time in state (will be grabbed and attached to \"message\" when user clicks submit button)\n    this.setState({\n      date: dateFull,\n      time: timeActual\n    })\n  }\n\n  // when the user clicks on the hamburger icon the settings menu will appear (in the main)\n  handleSettingsClick = () => {\n    this.setState({\n      settingsPageClicked: !this.state.settingsPageClicked\n    })\n  }\n\n  // when the user clicks on the emoji icon, \n  handleEmojiClick = (event) => {\n    event.preventDefault();\n    const newState = !this.state.showEmojiPicker;\n    this.setState({\n      showEmojiPicker: newState\n    })\n  }\n\n  hanldleColorChange = (event) => {\n    // working on adding this\n    // this.setState({\n    //   theme: {\n    //     messageColor: event.target.value;\n    //   }\n    // })\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        headerChange={this.state.currentUser}\n        handleSettingsClick={this.handleSettingsClick}/>\n        <main>\n          {/* first conditional: if the user variable in state is null, user is not logged in, in this case render the signup/login page\n          if the user variable holds the current user object from firebase, the user is logged in, in this case render the MAIN page */}\n          {this.state.currentUser === null \n\n          ? \n\n          <SignInLogIn \n          emailSignUp={this.handleSignUpEmail}\n          passwordSignUp={this.hanldeSignUpPassword}\n          onButtonClickSignUp={this.handleSignUpSubmit}\n          emailSignIn={this.handleSignInEmail}\n          passwordSignIn={this.hanldeSignInPassword}\n          onButtonClickSignIn={this.handleSignInSubmit}/>\n\n          : \n          \n          // second conditional\n          // rendering of the MAIN section of the page\n          // if the setting page icon was clicked it, the variable settingsPageClicked in state will be true, in this case render the settings page\n          // else it is false, and in this case render the messaging page\n          (this.state.settingsPageClicked === true\n           \n          ?\n\n          <Settings \n          username={this.state.username}\n          userName={this.handleUserName}\n          onButtonClickUserName={this.handleSaveUserName}\n          selectedColorOption={this.state.selectedColorOption}\n          handleColorChange={this.handleColorChange}\n          logOut={this.handleLogOut}/>\n\n          :\n\n          <div className=\"content\">\n            <MessagesList\n              user={this.state.currentUser}\n              messages={this.state.messages}\n              messagesUSM={this.state.userSpecificMessages}\n              messageColor={this.state.theme.messageColor} />\n            <SendMessage\n              onTextInput={this.handleChange}\n              textInputValue={this.state.userInput}\n              onEmojiClick={this.handleEmojiClick}\n              showEmojiPicker={this.state.showEmojiPicker}\n              onButtonClick={this.handleSubmit}\n            />\n          </div>\n          )\n          }\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}