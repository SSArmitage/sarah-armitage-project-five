{"version":3,"sources":["firebase.js","Header.js","Settings.js","Footer.js","SendMessage.js","MessageList.js","SignInLogIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","Component","className","onClick","this","props","logOut","htmlFor","type","id","onChange","changeThemeColor","onSubmit","onButtonClickUserName","value","username","userName","Footer","SendMessage","onButtonClick","rows","cols","placeholder","onTextInput","textInputValue","MessageList","divStyle","borderColor","messageColor","array","messagesUSM","messages","map","message","style","text","SignInLogIn","onButtonClickSignUp","emailSignUp","passwordSignUp","onButtonClickSignIn","emailSignIn","passwordSignIn","App","handleChange","event","setState","userInput","target","handleSubmit","preventDefault","console","log","dbRef","database","ref","dbRefUSM","newMessagesArray","Object","assign","state","newUserSpecificMessagesArray","userSpecificMessages","messageToBeAdded","currentUser","displayName","length","push","shift","set","handleSignUpEmail","email","hanldeSignUpPassword","password","handleSignUpSubmit","auth","createUserWithEmailAndPassword","catch","error","handleSignInEmail","hanldeSignInPassword","handleSignInSubmit","signInWithEmailAndPassword","errorCode","code","errorMessage","handleLogOut","signOut","then","handleUserName","handleSaveUserName","user","updateProfile","handleThemeColorChange","theme","uid","child","themeColor","messagesFiltered","settingsPage","on","snapshot","messagesArray","val","onAuthStateChanged","usersInfo","userUid","photoURL","emailVerified","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae1b1fe7.chunk.js","sourcesContent":["// import firebase from node modules\nimport firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDbV1S2623FseOXa7X5Y3cRuUBY8Xx_Uv8\",\n    authDomain: \"chat-app-26edb.firebaseapp.com\",\n    databaseURL: \"https://chat-app-26edb.firebaseio.com\",\n    projectId: \"chat-app-26edb\",\n    storageBucket: \"chat-app-26edb.appspot.com\",\n    messagingSenderId: \"1057627994740\",\n    appId: \"1:1057627994740:web:77d4d8bb6632df674fef21\"\n};\n// Initialize Firebase using the config\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport Settings from './Settings';\n\nclass Header extends Component {\n    render() {\n        return(\n            <header>\n                <div className=\"wrapper\">\n                    <h1>Title</h1>\n                    <button onClick={this.props.logOut}>Log Out</button>\n                    <form>\n                        <label htmlFor=\"themeColor\">Pick Message Color Theme:</label>\n                        <input \n                        type=\"color\" \n                        id=\"themeColor\"\n                        onChange={this.props.changeThemeColor}/>\n                    </form>\n                    <form onSubmit={this.props.onButtonClickUserName}>\n                        <label>Add Username</label>\n                        <input \n                        type=\"text\"\n                        value={this.props.username}\n                        onChange={this.props.userName} />\n                        <button>Save</button>\n                    </form>\n                </div>\n            </header>\n        );\n    };\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Settings extends Component {\n    render() {\n        return(\n            <div className=\"settings\">\n                <h2>Settings</h2>\n                <ul>\n                    <li><button onClick={this.props.settingsPage}>Settings</button></li>\n                    <li>Add/Change Username</li>\n                    <li>Add Profile Picture</li>\n                    <li onClick={this.props.changeTheme}>Change Theme</li>\n                </ul>\n            </div>\n        );\n    };\n}\n\nexport default Settings;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <div className=\"wrapper\">\n                    <p>Copyright Sarah Armitage 2019</p>\n                </div>\n            </footer>\n        );\n    };\n}\n\nexport default Footer;","import React, { Component } from 'react';\n\nclass SendMessage extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <form onSubmit={this.props.onButtonClick}>\n                    <label htmlFor=\"userMessage\"></label>\n                    {/* <input type=\"text\" id=\"userMessage\" /> */}\n                    <textarea \n                    rows=\"10\" \n                    cols=\"40\" \n                    placeholder=\"Enter message here\" \n                    id=\"userMessage\" \n                    onChange={this.props.onTextInput}\n                    value={this.props.textInputValue}>\n                    </textarea>\n                    <button>Send</button>\n                </form>\n            </div>\n        );\n    };\n}\n\nexport default SendMessage;","import React, { Component } from 'react';\n\nclass MessageList extends Component {\n    // constructor() {\n    //     super();\n    //     this.state = {\n    //         settingsPage: false\n    //     }\n    // }\n    render() {\n        // change color of message borders based on user selection (passed down as a prop from App.js)\n        let divStyle = {\n            borderColor: `${this.props.messageColor}`\n            // backgroundColor: 'purple',\n            // backgroundImage: 'url(' + imgUrl + ')',\n        };\n        let divStyleOtherUser = {\n            borderColor: 'blue'\n            // backgroundColor: 'purple',\n            // backgroundImage: 'url(' + imgUrl + ')',\n        };\n        const arrayUSM = this.props.messagesUSM\n        const array= this.props.messages\n\n\n        return(\n            <div className=\"wrapper messageListContainer\">\n                    <div className=\"messageBox\">\n                        {array.map((message) => {\n                            return (\n                                <li \n                                className=\"message\"\n                                style={divStyle} >\n                                    <p>{message.username}</p>\n                                    <p>{message.text}</p>\n                                </li>\n                            )\n                        })}\n                    </div>\n            </div>\n        );\n    };\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SignInLogIn extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <div className=\"notSingedInPage\">\n                    <h2>Not signed in</h2>\n                    {/* Sign up user */}\n                    <form className=\"signUp\"\n                        onSubmit={this.props.onButtonClickSignUp}>\n                        <fieldset>\n                            <legend>Sign Up!</legend>\n                            <label htmlFor=\"email\">Email Address</label>\n                            <input \n                                type=\"email\" \n                                id=\"email\" \n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignUp}/>\n                            <label htmlFor=\"password\">Password</label>\n                            <input \n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignUp} />\n                            <button>Sign Up!</button>\n                        </fieldset>\n                    </form>\n\n                    {/* Sign in user */}\n                    <form \n                        className=\"login\"\n                        onSubmit={this.props.onButtonClickSignIn}>\n                        <fieldset>\n                            <legend>Sign In!</legend>\n                            <label htmlFor=\"email\">Email Address</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignIn} />\n                            <label htmlFor=\"password\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignIn} />\n                            <button>Sign In</button>\n                        </fieldset>\n                    </form>\n                </div>\n            </div> \n        );\n    };\n}\n\nexport default SignInLogIn;","import React, { Component } from 'react';\n// import styles\nimport './App.css';\n// import firebase\nimport firebase from './firebase';\n// import components\nimport Header from './Header';\nimport Footer from './Footer';\nimport SendMessage from './SendMessage';\nimport MessagesList from './MessageList';\nimport SignInLogIn from './SignInLogIn';\n\n// const messagesArray = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      userSpecificMessages: [],\n      messagesFiltered: [],\n      userInput: '',\n      currentUser: null,\n      username: '',\n      uid: '',\n      email: '',\n      password: '',\n      settingsPage: false,\n      theme: {\n        messageColor: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    // connect app to firebase (messages stored in the messages branch)\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    \n    // when the database changes (newMessages array) grab the data in the database (will come back as an array)\n    dbRef.on('value', (snapshot) => {\n    const messagesArray = snapshot.val();\n    console.log(messagesArray);\n    \n    // set state with messagesArray from databse\n    this.setState({\n      messages: messagesArray\n    })\n\n    // grab the user's custom theme colour\n    // const dbRefUsers = firebase.database().ref('users');\n    // console.log(dbRefUsers);\n    });\n\n    dbRefUSM.on('value', (snapshot) => {\n      const messagesArray = snapshot.val();\n      console.log(messagesArray);\n\n      // set state with messagesArray from databse\n      this.setState({\n        userSpecificMessages: messagesArray\n      })\n    });\n\n    // set an event listener for user login status\n    // listen for change in user auth status (is user logged in or not?)\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        console.log(\"I am logged in\");\n        console.log(user);\n        // if the user is signed it, set the user object to the current user in state (current user will go from null -> user object), this will conidtionally render the chat page\n        this.setState({\n          currentUser: user,\n          uid: user.uid\n        })\n\n        // grab the user's custom theme colour from the database and set that in state, so that the messages will be updated to have that color\n        const dbRefUsers = firebase.database().ref('users');\n        dbRefUsers.on('value', (snapshot) => {\n          const usersInfo = snapshot.val();\n          this.setState({\n            theme: {\n              messageColor: usersInfo[`${this.state.uid}`].themeColor\n            }\n          })\n        })\n\n\n      } else {\n        // No user is signed in.\n        // currentUser in state will be set to null, will show login page\n        console.log(\"I am not logged in\");\n        this.setState({\n          currentUser: null\n        })\n      }\n\n      // get user info (use this info to differenitate the users text bubbles?)\n      const currentUser = firebase.auth().currentUser;\n      if (currentUser != null) {\n        const userName = user.displayName;\n        const userEmail = user.email;\n        const userPhotoUrl = user.photoURL;\n        const userEmailVerified = user.emailVerified;\n        const userUid = user.uid;  // The user's ID, unique to the Firebase project. Do NOT use\n        // this value to authenticate with your backend server, if\n        // you have one. Use User.getToken( instead.\n        console.log(userUid);\n        console.log(userName);\n        \n      }\n    });\n    \n    // \n    // // grab the user's custom theme colour from the database\n    const dbRefUsers = firebase.database().ref('users');\n    dbRefUsers.on('value', (snapshot) => {\n      const usersInfo = snapshot.val();\n      // console.log(this.state.theme.messageColor);\n      \n      // console.log(usersInfo);\n      // // console.log(this.state.uid);\n      // const userObject = usersInfo[`${this.state.uid}`];\n      // console.log(userObject);\n      // console.log(this.state.uid);\n      \n      // const userObject = usersInfo[`${this.state.user}`];\n      // console.log(userObject);\n      // const userThemeSelection = userObject.themeColor;\n      // console.log(userThemeSelection);\n\n      // push the slected theme color up to the databsae (use set to replace the previous one)\n      // console.log(usersInfo.uid);\n      \n      // firebase.database().ref().child('users').child(this.state.uid).set(this.state.theme.messageColor)\n    });\n\n    // set an event listener for \n\n  } \n\n  handleChange = (event) => {\n    // console.log(`Hiii`);\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(`clicked button`);\n    // will use dbRef when pushing up the new array to the database\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    // clone the array of database messages from state using spread\n    // const newMessagesArray = [...this.state.messages];\n    // const newUserSpecificMessagesArray = [...this.state.userSpecificMessages];\n    // console.log(\"cloned array\", newMessagesArray);\n\n    // clone the array of databast message objects from state using Object.assign method\n    // cant use spread b/c it is a shalow copy and woulndt copy the nested elements\n    const newMessagesArray = [];\n    Object.assign(newMessagesArray, this.state.messages);\n    console.log(\"cloned array\", newMessagesArray);\n    const newUserSpecificMessagesArray = [];\n    Object.assign(newUserSpecificMessagesArray, this.state.userSpecificMessages);\n    console.log(\"cloned array\", newUserSpecificMessagesArray);\n\n    // grab the message inputted by the user (held in state)\n    // const messageToBeAdded = this.state.userInput;\n    const messageToBeAdded = {\n      username: this.state.currentUser.displayName,\n      text: this.state.userInput\n    };\n    console.log(messageToBeAdded);\n  \n\n    \n    // add messageToBeAdded to the cloned array, and push that array up to firebase (use set to replace the previous array up there)\n    // first check to see if the length of the newMessagesArray is less than 100 \n    // also check if the message is just an empty string\n    // then add messageToBeAdded to newMessagesArray\n    // then set in firebase (so that the dbRef listener will will be called and it will update the this.state.messages and cause app to re-render with the new message added to the list of messages)\n\n    // if the user's input is not empty, enter statment:\n    if (messageToBeAdded.text !== '') {\n      console.log(\"I am not empty\");\n\n      // if the cloned messages array is less than 100:\n      if (newMessagesArray.length < 100) {\n        console.log(`there are less than 100 messages in here!`);\n        // add the new message to the array\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n        \n\n        // else if the cloned messages array is greater than 100:\n      } else {\n        // remove the first message from the array (index=0)\n        newMessagesArray.shift();\n        newUserSpecificMessagesArray.shift();\n        // then add the new message to the end\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n      }\n      // dbRef.set(newMessagesArray);\n\n    } else {\n      console.log(\"I am empty\");\n    }\n\n    // push the newMessagesArray up to firebase (set to replace)\n    dbRef.set(newMessagesArray);\n    dbRefUSM.set(newUserSpecificMessagesArray);\n\n    // ****************************************\n    // filter through arrays\n    // const twoArray = this.state.messages;\n    // const oneArray = this.state.userSpecificMessages;\n    // twoArray.forEach((message) => {\n    //   if (oneArray.includes(message)) {\n    //     console.log(message);\n        \n    //   }\n    // })\n\n    // console.log(newMessagesArray);\n    // reset the userInput for the next message\n    this.setState({\n      userInput: ''\n    }); \n  }\n  // -------------------- AUTHENTICATION ---------------------\n  // grab user email for sign up\n  handleSignUpEmail = (event) => {\n   this.setState({\n     email: event.target.value\n   })\n  }\n\n  // grab user password for sign up\n  // need to put notifcation for user -> password needs to be > 6 characters long\n  hanldeSignUpPassword = (event) => {    \n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign up button\n  handleSignUpSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // create new account for user\n    firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\n      // handle errors here\n      console.log(error);\n    })\n  }\n\n  // grab user email for sign in\n  handleSignInEmail = (event) => {\n    this.setState({\n      email: event.target.value\n    })\n  }\n\n  // grab user password for sign in\n  hanldeSignInPassword = (event) => {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign in button\n  handleSignInSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // change in user auth status fires the auth event listener\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n    });\n  }\n\n  handleLogOut = (event) => {\n    // change in user auth status fires the auth event listener\n    firebase.auth().signOut().then(function () {\n      // Sign-out successful.\n      console.log(`I was signed out`);\n    }).catch(function (error) {\n      // An error happened.\n      console.log(error);\n    });\n  }\n\n  // grab user's desire username \n  handleUserName = (event) => {\n    this.setState({\n      username: event.target.value\n    })\n  }\n  // send username to firebase auth\n  handleSaveUserName = (event) => {\n    event.preventDefault();\n\n    const user = firebase.auth().currentUser;\n    const userName = user.displayName;\n    user.updateProfile({\n      displayName: this.state.username,\n      // photoURL: \"https://example.com/jane-q-user/profile.jpg\"\n    }).then(function () {\n      // Update successful.\n      console.log('successfully updated username');\n      const userName = user.displayName;\n      console.log(userName);\n      \n    }).catch(function (error) {\n      // An error happened.\n      console.log('did not successfully updated username');\n    });\n\n    this.setState({\n      username: ''\n    });\n  }\n\n\n  \n  // ---------------- END OF AUTHENTICATION ------------------\n\n  handleThemeColorChange = (event) => {\n    this.setState({\n      theme: {\n        messageColor: event.target.value\n      } \n    })\n    console.log(\"I picked a different color!\");\n    // console.log(event.target.value);\n    const uid = this.state.currentUser.uid\n    console.log(uid);\n    console.log(this.state.theme.messageColor);\n    \n    // push the theme color selected by the user up to firebase (save it in under the user's specific uid #)\n    // const uid = firebase.auth().currentUser.uid;\n    firebase.database().ref().child('users').child(uid).set({\n      themeColor: `${this.state.theme.messageColor}`\n    })\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        logOut={this.handleLogOut}\n        changeThemeColor={this.handleThemeColorChange}\n        username={this.state.username}\n        userName={this.handleUserName} \n        onButtonClickUserName={this.handleSaveUserName}/>\n        <main>\n          {this.state.currentUser === null \n\n          ? \n\n          <SignInLogIn \n          emailSignUp={this.handleSignUpEmail}\n          passwordSignUp={this.hanldeSignUpPassword}\n          onButtonClickSignUp={this.handleSignUpSubmit}\n          emailSignIn={this.handleSignInEmail}\n          passwordSignIn={this.hanldeSignInPassword}\n          onButtonClickSignIn={this.handleSignInSubmit}/>\n\n          : \n          \n          <div className=\"content\">\n            <p>signed in</p>\n            <MessagesList \n            messages={this.state.messages}\n            messagesUSM={this.state.userSpecificMessages}\n            messageColor={this.state.theme.messageColor}/>\n            <SendMessage \n            onTextInput={this.handleChange} \n            textInputValue={this.state.userInput}\n            onButtonClick={this.handleSubmit}\n            />\n          </div>\n          }\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}