{"version":3,"sources":["firebase.js","Settings.js","Header.js","Footer.js","EmojiPicker.js","SendMessage.js","MessageList.js","SignInLogIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Settings","className","onSubmit","this","props","onButtonClickUserName","id","type","value","username","onChange","userName","changeThemeColor","onClick","logOut","Component","Header","handleSettingsClick","class","Footer","EmojiPicker","useState","chosenEmoji","setChosenEmoji","emoji","onEmojiClick","event","emojiObject","SendMessage","onButtonClick","htmlFor","rows","cols","placeholder","onTextInput","textInputValue","showEmojiPicker","MessageList","messagesUSM","user","console","log","displayName","messageStyle","messageStyleOtherUser","array","messages","backgroundColor","map","message","style","date","time","text","SignInLogIn","onButtonClickSignUp","emailSignUp","passwordSignUp","onButtonClickSignIn","emailSignIn","passwordSignIn","App","determineWindowsOrMac","isMacintosh","navigator","platform","indexOf","isMac","isPC","setState","userComputer","handleChange","userInput","target","getDateAndTime","handleSubmit","preventDefault","dbRef","database","ref","dbRefUSM","newMessagesArray","Object","assign","state","newUserSpecificMessagesArray","userSpecificMessages","messageToBeAdded","currentUser","userId","uid","length","push","shift","set","handleSignUpEmail","email","hanldeSignUpPassword","password","handleSignUpSubmit","auth","createUserWithEmailAndPassword","catch","error","handleSignInEmail","hanldeSignInPassword","handleSignInSubmit","signInWithEmailAndPassword","errorCode","code","errorMessage","settingsPageClicked","handleLogOut","signOut","then","handleUserName","handleSaveUserName","updateProfile","updateUserNameInDB","forEach","handleThemeColorChange","theme","messageColor","child","themeColor","day","Date","getDate","monthNumber","getMonth","year","getFullYear","dateFull","hours","getHours","min","getMinutes","sec","getSeconds","timeMilitary","i","timeNormal","x","unshift","timeIndex","timeActual","handleEmojiClick","newState","messagesFiltered","on","snapshot","messagesArray","val","onAuthStateChanged","usersInfo","userUid","photoURL","emailVerified","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.509219c9.chunk.js","sourcesContent":["// import firebase from node modules\nimport firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDbV1S2623FseOXa7X5Y3cRuUBY8Xx_Uv8\",\n    authDomain: \"chat-app-26edb.firebaseapp.com\",\n    databaseURL: \"https://chat-app-26edb.firebaseio.com\",\n    projectId: \"chat-app-26edb\",\n    storageBucket: \"chat-app-26edb.appspot.com\",\n    messagingSenderId: \"1057627994740\",\n    appId: \"1:1057627994740:web:77d4d8bb6632df674fef21\"\n};\n// Initialize Firebase using the config\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\n\nclass Settings extends Component {\n    render() {\n        return(\n            <div className=\"settings\">\n                <div className=\"wrapper flexContainer\">\n                    <h2>Settings</h2>\n                    <ul>\n                        <li>\n                            <form onSubmit={this.props.onButtonClickUserName}>\n                                {/* <fieldset> */}\n                                    <legend>Add/Change Username</legend>\n                                    {/* <label htmlFor=\"username\">Add/Change Username</label> */}\n                                    <input\n                                        id=\"username\"\n                                        type=\"text\"\n                                        value={this.props.username}\n                                        onChange={this.props.userName} />\n                                    <button>Save</button>\n                                {/* </fieldset> */}\n                            </form>\n                        </li>\n                        <li>\n                            <form>\n                                {/* <fieldset> */}\n                                    <label>Add/Change Display Picture</label>\n                                {/* </fieldset> */}\n                            </form>\n                        </li>\n                        <li>\n                            <form>\n                                {/* <fieldset> */}\n                                    <legend>Change Color Theme</legend>\n                                    {/* <label htmlFor=\"themeColor\">Pick Message Color Theme:</label> */}\n                                    <input\n                                        type=\"color\"\n                                        id=\"themeColor\"\n                                        value=\"#ff34df\"\n                                        onChange={this.props.changeThemeColor} />\n                                {/* </fieldset> */}\n                            </form>\n                        </li>\n                        <li>\n                            <form>\n                                {/* <fieldset> */}\n                                    <label>Change Font Size</label>\n                                {/* </fieldset> */}\n                            </form>\n                        </li>\n                        <button onClick={this.props.logOut}>Log Out</button>\n                    </ul>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Settings;","import React, { Component } from 'react';\nimport Settings from './Settings';\n\nclass Header extends Component {\n    // constructor() {\n    //     super();\n    //     this.state = {\n    //         settingsPageOpen: false\n    //     }\n    // }\n\n    render() {\n        return(\n            <header>\n                <div className=\"wrapper flexContainer\">\n                    <h1>Chat App</h1>\n                    <div \n                    className=\"iconContainer\"\n                    onClick={this.props.handleSettingsClick}>\n                        <i class=\"fas fa-bars\"></i>\n                    </div>\n                    {/* <button onClick={this.props.logOut}>Log Out</button> */}\n                    {/* <form>\n                        <label htmlFor=\"themeColor\">Pick Message Color Theme:</label>\n                        <input \n                        type=\"color\" \n                        id=\"themeColor\"\n                        value=\"#ff34df\"\n                        onChange={this.props.changeThemeColor}/>\n                    </form>\n                    <form onSubmit={this.props.onButtonClickUserName}>\n                        <label>Add Username</label>\n                        <input \n                        type=\"text\"\n                        value={this.props.username}\n                        onChange={this.props.userName} />\n                        <button>Save</button>\n                    </form> */}\n                </div>\n            </header>\n        );\n    };\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <div className=\"wrapper flexContainer\">\n                    <p>Copyright Sarah Armitage 2019</p>\n                </div>\n            </footer>\n        );\n    };\n}\n\nexport default Footer;","import React, { useState } from 'react';\nimport Picker from 'emoji-picker-react';\n\nconst EmojiPicker = () => {\n    const [chosenEmoji, setChosenEmoji] = useState(null);\n\n    const onEmojiClick = (event, emojiObject) => {\n        setChosenEmoji(emojiObject);\n    }\n\n    return (\n        <div>\n            {\n                chosenEmoji\n                    ? (<span>You chose: {chosenEmoji.emoji}</span>)\n                    : <span>No emoji Chosen</span>\n\n            }\n            <Picker onEmojiClick={onEmojiClick} />\n        </div>\n    );\n}\n\nexport default EmojiPicker;","import React, { Component } from 'react';\nimport EmojiPicker from './EmojiPicker';\n\nclass SendMessage extends Component {\n    render() {\n        return(\n            <div className=\"sendMessageArea\">\n                <div className=\"wrapper flexContainer\">\n                    <form onSubmit={this.props.onButtonClick}>\n                        {/* <fieldset> */}\n                            <label htmlFor=\"userMessage\"></label>\n                            {/* <input type=\"text\" id=\"userMessage\" /> */}\n                            <textarea \n                            rows=\"10\" \n                            cols=\"40\" \n                            placeholder=\"Enter message here\" \n                            id=\"userMessage\" \n                            onChange={this.props.onTextInput}\n                            value={this.props.textInputValue}>\n                            </textarea>\n                            <div\n                            className=\"sendAndEmojiContainer\">\n                                <button \n                                className=\"emojiIcon\"\n                                onClick={this.props.onEmojiClick}>\n                                    <i class=\"far fa-laugh\"></i>\n                                </button>\n                                <button>Send</button>   \n                            </div>\n                            \n                        {/* </fieldset> */}\n                        {this.props.showEmojiPicker \n                        ? \n                        <div className=\"emojiPicker\">\n                            <EmojiPicker />\n                        </div> \n                        :\n                        null}\n                    </form>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default SendMessage;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nclass MessageList extends Component {\n    render() {\n        // change color of message borders based on user selection (passed down as a prop from App.js)\n        const arrayUSM = this.props.messagesUSM\n        // don't think I need this user specific messages anymore??? (have usernames atatched to messages now)\n        const user = this.props.user;\n        console.log(user.displayName);\n        \n        const array = this.props.messages;\n        let messageStyle;\n        let messageStyleOtherUser;\n\n        messageStyle = {\n            // borderColor: `${this.props.messageColor}`,\n            // backgroundColor: `${this.props.messageColor}`,\n            backgroundColor: 'blueviolet'\n            // backgroundImage: 'url(' + imgUrl + ')',\n        };\n        // default color for the other users\n        messageStyleOtherUser = {\n            // borderColor: 'blue',\n            // backgroundColor: '#0392cf',\n            backgroundColor: '#0392cf',\n            // backgroundColor: 'purple',\n            // backgroundImage: 'url(' + imgUrl + ')',\n        };\n\n        // find the uid associated with the username and match based on that for color\n        // \n        return(\n\n            <div className=\"messageArea\">\n                <div className=\"wrapper messageListContainer\">\n                        {/* <div className=\"messageBox\"> */}\n                        <ScrollToBottom className=\"messageBox\">\n                            {   \n                                \n                            array.map((message) => {\n                                if (message.username === user.displayName) {\n                                    return(\n                                        <li\n                                            className=\"message currentUserPosition\"\n                                            style={messageStyle} >\n                                            <p \n                                            className=\"userName\">\n                                            {message.username}</p>\n                                            <p\n                                            className=\"dateAndTime\">\n                                            {`${message.date} ${message.time}`}</p>\n                                            <p \n                                            className=\"messageText\">\n                                            {message.text}</p>\n                                        </li>\n                                    )\n                                } else {\n                                    return(\n                                        <li\n                                            className=\"message\"\n                                            style={messageStyleOtherUser} >\n                                            <p \n                                            className=\"userName\">{message.username}</p>\n                                            <p\n                                            className=\"dateAndTime\">\n                                            {`${message.date} ${message.time}`}</p>\n                                            <p\n                                            className=\"messageText\">\n                                            {message.text}</p>\n                                        </li>\n                                    )\n                                }\n                            })}\n                        </ScrollToBottom>\n                        {/* </div> */}\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SignInLogIn extends Component {\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <div className=\"notSingedInPage\">\n                    {/* <h2>Not signed in</h2> */}\n                    {/* Sign up user */}\n                    <form className=\"signUp\"\n                        onSubmit={this.props.onButtonClickSignUp}>\n                        {/* <fieldset> */}\n                            <h2>Sign Up</h2>\n                            <label htmlFor=\"displayName\">Username:</label>\n                            <input \n                                type=\"text\" \n                                id=\"displayName\" \n                                placeholder=\"Username\"/>\n                            <label htmlFor=\"email\">Email Address:</label>\n                            <input \n                                type=\"email\" \n                                id=\"email\" \n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignUp}/>\n                            <label htmlFor=\"password\">Password:</label>\n                            <input \n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignUp} />\n                            <button>Sign Up</button>\n                        {/* </fieldset> */}\n                    </form>\n\n                    {/* Sign in user */}\n                    <form \n                        className=\"login\"\n                        onSubmit={this.props.onButtonClickSignIn}>\n                        {/* <fieldset> */}\n                            <h2>Sign In</h2>\n                            <label htmlFor=\"email\">Email Address:</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email address\"\n                                onChange={this.props.emailSignIn} />\n                            <label htmlFor=\"password\">Password:</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                onChange={this.props.passwordSignIn} />\n                            <button>Sign In</button>\n                        {/* </fieldset> */}\n                    </form>\n                </div>\n            </div> \n        );\n    };\n}\n\nexport default SignInLogIn;","import React, { Component } from 'react';\n// import styles\nimport './App.css';\n// import firebase\nimport firebase from './firebase';\n// import components\nimport Header from './Header';\nimport Footer from './Footer';\nimport SendMessage from './SendMessage';\nimport MessagesList from './MessageList';\nimport SignInLogIn from './SignInLogIn';\nimport Settings from './Settings';\n// import 'react-native-emoji-selector';\n\n\n\n// const messagesArray = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      userSpecificMessages: [],\n      messagesFiltered: [],\n      userInput: '',\n      currentUser: null,\n      username: '',\n      uid: '',\n      email: '',\n      password: '',\n      settingsPageClicked: false,\n      theme: {\n        messageColor: ''\n      },\n      date: '',\n      time: '',\n      userComputer: '',\n      showEmojiPicker: false\n    }\n  }\n\n  determineWindowsOrMac = () => {\n    // fxn to determine if users window is a Mac\n    // if yes, returns true\n    const isMacintosh = () => {\n      return navigator.platform.indexOf('Mac') > -1\n    }\n\n    // isWindows = () => {\n    //   return navigator.platform.indexOf('Win') > -1\n    // }\n\n    const isMac = isMacintosh();\n    const isPC = !isMacintosh();\n    console.log(isMac, isPC);\n\n    // if isMacintosh is true, set the userComputer variable in state to be 'Mac'\n    if (isMac) {\n      this.setState({\n        userComputer: 'Mac'\n    })\n    // if isMacintosh is false, set the userComputer variable in state to be 'PC'\n    } else {\n      this.setState({\n        userComputer: 'PC'\n    })\n    }\n  }  \n\n  componentDidMount() {\n    // Determine if users computer is windows or mac \n    // save it to state, then use this to run a set of keyboard codes to make the emoji keyboard to open\n    this.determineWindowsOrMac();\n\n    // connect app to firebase (messages stored in the messages branch)\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    \n    // when the database changes (newMessages array) grab the data in the database (will come back as an array)\n    dbRef.on('value', (snapshot) => {\n    const messagesArray = snapshot.val();\n    console.log(messagesArray);\n    \n    // set state with messagesArray from databse\n    this.setState({\n      messages: messagesArray\n    })\n\n    // grab the user's custom theme colour\n    // const dbRefUsers = firebase.database().ref('users');\n    // console.log(dbRefUsers);\n    });\n\n    dbRefUSM.on('value', (snapshot) => {\n      const messagesArray = snapshot.val();\n      console.log(messagesArray);\n\n      // set state with messagesArray from databse\n      this.setState({\n        userSpecificMessages: messagesArray\n      })\n    });\n\n    // set an event listener for user login status\n    // listen for change in user auth status (is user logged in or not?)\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        console.log(\"I am logged in\");\n        console.log(user);\n        // if the user is signed it, set the user object to the current user in state (current user will go from null -> user object), this will conidtionally render the chat page\n        this.setState({\n          currentUser: user,\n          uid: user.uid\n        })\n\n        // grab the user's custom theme colour from the database and set that in state, so that the messages will be updated to have that color\n        const dbRefUsers = firebase.database().ref('users');\n        dbRefUsers.on('value', (snapshot) => {\n          const usersInfo = snapshot.val();\n          this.setState({\n            theme: {\n              messageColor: usersInfo[`${this.state.uid}`].themeColor\n            }\n          })\n        })\n\n\n      } else {\n        // No user is signed in.\n        // currentUser in state will be set to null, will show login page\n        console.log(\"I am not logged in\");\n        this.setState({\n          currentUser: null\n        })\n      }\n\n      // get user info (use this info to differenitate the users text bubbles?)\n      const currentUser = firebase.auth().currentUser;\n      if (currentUser != null) {\n        const userName = user.displayName;\n        const userEmail = user.email;\n        const userPhotoUrl = user.photoURL;\n        const userEmailVerified = user.emailVerified;\n        const userUid = user.uid;  // The user's ID, unique to the Firebase project. Do NOT use\n        // this value to authenticate with your backend server, if\n        // you have one. Use User.getToken( instead.\n        console.log(userUid);\n        console.log(userName);\n        \n      }\n    });\n    \n    // // grab the user's custom theme colour from the database\n    const dbRefUsers = firebase.database().ref('users');\n    dbRefUsers.on('value', (snapshot) => {\n      const usersInfo = snapshot.val();\n    });\n\n    // set an event listener for \n  } \n\n  handleChange = (event) => {\n    // console.log(`Hiii`);\n    this.setState({\n      userInput: event.target.value\n    })\n    // when user types message, grab the date and time\n    this.getDateAndTime();\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(`clicked button`);\n    // will use dbRef when pushing up the new array to the database\n    const dbRef = firebase.database().ref('messages');\n    const dbRefUSM = firebase.database().ref('userSpecificMessages');\n    // clone the array of database messages from state using spread\n    // const newMessagesArray = [...this.state.messages];\n    // const newUserSpecificMessagesArray = [...this.state.userSpecificMessages];\n    // console.log(\"cloned array\", newMessagesArray);\n\n    // clone the array of databast message objects from state using Object.assign method\n    // cant use spread b/c it is a shalow copy and woulndt copy the nested elements\n    const newMessagesArray = [];\n    Object.assign(newMessagesArray, this.state.messages);\n    console.log(\"cloned array\", newMessagesArray);\n    const newUserSpecificMessagesArray = [];\n    Object.assign(newUserSpecificMessagesArray, this.state.userSpecificMessages);\n    console.log(\"cloned array\", newUserSpecificMessagesArray);\n\n    // grab the message inputted by the user (held in state)\n    // const messageToBeAdded = this.state.userInput;\n    const messageToBeAdded = {\n      username: this.state.currentUser.displayName,\n      userId: this.state.currentUser.uid,\n      text: this.state.userInput,\n      date: this.state.date,\n      time: this.state.time\n    };\n    console.log(messageToBeAdded);\n\n    // need to go through all the messages and change the username to the current username\n    // update the user specific messages array to have the current username\n    // newUserSpecificMessagesArray.forEach((message) => {\n    //   console.log(message);\n    //   return(\n    //     message.username = this.state.currentUser.displayName\n    //   );\n    // })\n    // console.log(newUserSpecificMessagesArray);\n\n    // ****************HERE HRER HERE **************\n    // // keep the username up to date for all messages of a user (when/if a user changes their username, want to update all the messages they sent to have the current username)\n    // // doesnt work yet!!!! still have old messages appearing as old name???\n    // newMessagesArray.forEach((message) => {\n    //   // console.log(message);\n    //   // console.log(this.state.currentUser);\n      \n    //   // if the userId of the message matches the current user's Id, then update that message to have the users current username\n    //   if (message.userId === this.state.currentUser.uid) {\n    //     console.log(message.userId, this.state.currentUser.uid);\n        \n    //       message.username = this.state.currentUser.displayName\n    //   }\n    // })\n    // then grab the total messages array (newMessagesArray) and compare to the user specific ones and update those to have the current username\n    \n  \n\n    \n    // add messageToBeAdded to the cloned array, and push that array up to firebase (use set to replace the previous array up there)\n    // first check to see if the length of the newMessagesArray is less than 100 \n    // also check if the message is just an empty string\n    // then add messageToBeAdded to newMessagesArray\n    // then set in firebase (so that the dbRef listener will will be called and it will update the this.state.messages and cause app to re-render with the new message added to the list of messages)\n\n    // if the user's input is not empty, enter statment:\n    if (messageToBeAdded.text !== '') {\n      console.log(\"I am not empty\");\n\n      // if the cloned messages array is less than 100:\n      if (newMessagesArray.length < 100) {\n        console.log(`there are less than 100 messages in here!`);\n        // add the new message to the array\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n        \n\n        // else if the cloned messages array is greater than 100:\n      } else {\n        // remove the first message from the array (index=0)\n        newMessagesArray.shift();\n        newUserSpecificMessagesArray.shift();\n        // then add the new message to the end\n        newMessagesArray.push(messageToBeAdded);\n        newUserSpecificMessagesArray.push(messageToBeAdded);\n        console.log(newMessagesArray);\n      }\n      // dbRef.set(newMessagesArray);\n\n    } else {\n      console.log(\"I am empty\");\n    }\n\n    // push the newMessagesArray up to firebase (set to replace)\n    dbRef.set(newMessagesArray);\n    dbRefUSM.set(newUserSpecificMessagesArray);\n\n    // ****************************************\n    // filter through arrays\n    // const twoArray = this.state.messages;\n    // const oneArray = this.state.userSpecificMessages;\n    // twoArray.forEach((message) => {\n    //   if (oneArray.includes(message)) {\n    //     console.log(message);\n        \n    //   }\n    // })\n\n    // console.log(newMessagesArray);\n    // reset the userInput for the next message\n    // reset the date and time for next message\n    this.setState({\n      userInput: '',\n      date: '',\n      time: ''\n    }); \n  }\n  // -------------------- AUTHENTICATION ---------------------\n  // grab user email for sign up\n  handleSignUpEmail = (event) => {\n   this.setState({\n     email: event.target.value\n   })\n  }\n\n  // grab user password for sign up\n  // need to put notifcation for user -> password needs to be > 6 characters long\n  hanldeSignUpPassword = (event) => {    \n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign up button\n  handleSignUpSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // create new account for user\n    firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\n      // handle errors here\n      console.log(error);\n    })\n  }\n\n  // grab user email for sign in\n  handleSignInEmail = (event) => {\n    this.setState({\n      email: event.target.value\n    })\n  }\n\n  // grab user password for sign in\n  hanldeSignInPassword = (event) => {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  // when user clicks sign in button\n  handleSignInSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"I clicked the button!\");\n    // change in user auth status fires the auth event listener\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode, errorMessage);\n    });\n    // make sure the settings page is closed when user logs out\n    this.setState({\n      settingsPageClicked: false\n    })\n\n  }\n\n  handleLogOut = (event) => {\n    // change in user auth status fires the auth event listener\n    firebase.auth().signOut().then(function () {\n      // Sign-out successful.\n      console.log(`I was signed out`);\n    }).catch(function (error) {\n      // An error happened.\n      console.log(error);\n    });\n  }\n\n  // grab user's desired username \n  handleUserName = (event) => {\n    this.setState({\n      username: event.target.value\n    })\n  }\n  // send username to firebase auth\n  handleSaveUserName = (event) => {\n    event.preventDefault();\n\n    const user = firebase.auth().currentUser;\n    const userName = user.displayName;\n    user.updateProfile({\n      displayName: this.state.username,\n      // photoURL: \"https://example.com/jane-q-user/profile.jpg\"\n    }).then(function () {\n      // Update successful.\n      console.log('successfully updated username');\n      const userName = user.displayName;\n      console.log(userName);\n      \n    }).then(() => {\n      // call fxn to update username in databse (ensures it stays up to date in the message history)\n      this.updateUserNameInDB()\n    }).catch(function (error) {\n      // An error happened.\n      console.log('did not successfully updated username');\n    });\n\n    this.setState({\n      username: ''\n    });\n  }\n\n  // function to update username is database messages when the user changes their username\n  updateUserNameInDB = () => {\n    // reference to firebase, will use when sending array of messages with updated usernmes back up tp the DB\n    const dbRef = firebase.database().ref('messages');\n    const newMessagesArray = [];\n    // make a copy of the array held in this.state.messages (most recent copy of the mesages in firebase) and save it to an array called newMessagesArray\n    Object.assign(newMessagesArray, this.state.messages);\n\n    // keep the username up to date for all messages of a user (when/if a user changes their username, want to update all the messages they sent to have the current username)\n    newMessagesArray.forEach((message) => {\n      // if the userId of the message matches the current user's Id, then update that message to have the users current username\n      if (message.userId === this.state.currentUser.uid) {\n        console.log(message.userId, this.state.currentUser.uid);\n\n        message.username = this.state.currentUser.displayName\n      }\n    })\n    // once the array has been updated so that all the messages have the enw username, push that array up to firebase (this will cause a re-render and this.state.messages will be updated with the new array, and you will see the new username reflected in all the preivious messages)\n    dbRef.set(newMessagesArray);\n  }\n\n\n  \n  // ---------------- END OF AUTHENTICATION ------------------\n\n  handleThemeColorChange = (event) => {\n    this.setState({\n      theme: {\n        messageColor: event.target.value\n      } \n    })\n    console.log(\"I picked a different color!\");\n    // console.log(event.target.value);\n    const uid = this.state.currentUser.uid\n    console.log(uid);\n    console.log(this.state.theme.messageColor);\n    \n    // push the theme color selected by the user up to firebase (save it in under the user's specific uid #)\n    // const uid = firebase.auth().currentUser.uid;\n    firebase.database().ref().child('users').child(uid).set({\n      themeColor: `${this.state.theme.messageColor}`\n    })\n    \n  }\n\n  // function to grab the date and time (to use in messages)\n  getDateAndTime = () => {\n    // get the date\n    const day = new Date().getDate(); //Current Day\n    const monthNumber = new Date().getMonth(); //Current Month\n    const year = new Date().getFullYear(); //Current Year\n    // convert monthNumber into monthYear\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const monthWord = months[monthNumber];\n    const dateFull = `${monthWord} ${day}, ${year}`;\n    console.log(dateFull);\n    // get the time\n    const hours = new Date().getHours(); //Current Hours\n    const min = new Date().getMinutes(); //Current Minutes\n    const sec = new Date().getSeconds(); //Current Seconds\n    console.log(`${hours} ${min} ${sec}`);\n    // make 24hour clock array\n    const timeMilitary = []\n    for (let i = 0; i <= 24; i++) {\n      timeMilitary.push(i);\n    }\n    console.log(timeMilitary);\n\n    // make the 12hour clock array\n    const timeNormal = [];\n    for (let x = 1; x <= 2; x++) {\n      for (let i = 1; i <= 12; i++) {\n        timeNormal.push(i);\n      }\n    }\n    timeNormal.unshift(12)\n    console.log(timeNormal);\n\n    // convert the 24hour clock time into 12hour clock time\n    const timeIndex = timeMilitary.indexOf(hours);\n    console.log(\"the time index is:\", timeIndex);\n    const time = timeNormal[timeIndex];\n    // have: 14 22 31\n    // need: 2:22\n    console.log(time);\n    const timeActual = `${time}:${min}`;\n    console.log(timeActual);\n\n    // ---------------------------\n    // The final date and time stamp\n    // use: dateFull & timeActual\n    // ---------------------------\n\n    // save the date and time in state (will be grabbed and attached to \"message\" when user clicks submit button)\n    this.setState({\n      date: dateFull,\n      time: timeActual\n    })\n  }\n\n  // handleSettingsClick = (event, settingsPageStatus) => {\n  //   this.setState({\n  //     settingsPageClicked: !settingsPageStatus\n  //   })\n  //   console.log(\"Settings clicked!\");\n  // }\n\n  // when the user clicks on the hamburger icon the settings menu will appear (in the main)\n  handleSettingsClick = () => {\n    this.setState({\n      settingsPageClicked: !this.state.settingsPageClicked\n    })\n    console.log(\"Settings clicked!\");\n  }\n\n  // when the user clicks on the emoji icon, \n  handleEmojiClick = () => {\n    console.log('emoji was clicked!!!!');\n    const newState = !this.state.showEmojiPicker;\n    this.setState({\n      showEmojiPicker: newState\n    })\n    // if (this.state.userComputer === 'Mac') {\n    //   console.log(`I am a Mac`);\n      \n    // } else if (this.state.userComputer === 'PC') {\n    //   console.log(`I am a PC`);\n      \n    // }\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        // logOut={this.handleLogOut}\n        // changeThemeColor={this.handleThemeColorChange}\n        // username={this.state.username}\n        // userName={this.handleUserName} \n        // onButtonClickUserName={this.handleSaveUserName}\n        handleSettingsClick={this.handleSettingsClick}/>\n        <main>\n          {/* first conditional: if the user variable in state is null, user is not logged in, in this case render the signup/login page\n          if the user variable holds the current user object from firebase, the user is logged in, in this case render the MAIN page */}\n          {this.state.currentUser === null \n\n          ? \n\n          <SignInLogIn \n          emailSignUp={this.handleSignUpEmail}\n          passwordSignUp={this.hanldeSignUpPassword}\n          onButtonClickSignUp={this.handleSignUpSubmit}\n          emailSignIn={this.handleSignInEmail}\n          passwordSignIn={this.hanldeSignInPassword}\n          onButtonClickSignIn={this.handleSignInSubmit}/>\n\n          : \n          \n          // second conditional\n          // rendering of the MAIN section of the page\n          // if the setting page icon was clicked it, the variable settingsPageClicked in state will be true, in this case render the settings page\n          // else it is false, and in this case render the messaging page\n          (this.state.settingsPageClicked === true\n           \n          ?\n\n          <Settings \n          username={this.state.username}\n          userName={this.handleUserName}\n          onButtonClickUserName={this.handleSaveUserName}\n          changeThemeColor={this.handleThemeColorChange}\n          logOut={this.handleLogOut}/>\n\n          :\n\n          <div className=\"content\">\n            {/* <p>signed in</p> */}\n            <MessagesList\n              user={this.state.currentUser}\n              messages={this.state.messages}\n              messagesUSM={this.state.userSpecificMessages}\n              messageColor={this.state.theme.messageColor} />\n            <SendMessage\n              onTextInput={this.handleChange}\n              textInputValue={this.state.userInput}\n              onEmojiClick={this.handleEmojiClick}\n              showEmojiPicker={this.state.showEmojiPicker}\n              onButtonClick={this.handleSubmit}\n            />\n          </div>\n          )\n          }\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}